eu quero conversar um pouco contigo sobre os dados mais converso que quer dizer com isso imagine por exemplo que queiramos aí manipular com diferentes listas ou ainda na gerar diferentes combinações para um pequeno conjunto de dados que nós temos aqui isso pode ser utilizado em várias aplicações por exemplo e como saem se eu posso utilizar também na área dos jogos para desenvolvimento de jogos aí eu posso também queria utilizar isso para análises estatísticas mais complexas Então essa manipulação de diferentes informações pode ser algo bem útil para que consigam gerar algoritmos mais complexos e Atena essas necessidades que eu comentei anteriormente é um jeito Isso me acompanha no slide por favor qualquer ideia que nós visualizamos primeiro é realmente essa geração de diferentes valores é o Sérgio como conseguimos percorrer por listas ou a elementos gerados mais complexos então é para isso existem os imperadores e depois os geradores e também por último pelas diferentes combinações desses valores existe uma diferença entre combinação e permutação isso nós também queremos mas nesse contexto aqui é importante você saber que nós conseguimos gerar diferentes conjuntos de dados a partir de uma base de informações de valores bem menor e por último e começaremos também sobre sobrecarga de operadores essa sobrecarga ela pode ser bem útil por exemplo para utilizar uma sair símbolos como multiplicação soma e divisão entre valores que não são necessariamente números exemplo bem simples o que seria a multiplicação de maçã vezes banana nós conseguimos fazer isso em Python vamos lá

um tópico bem importante para falarmos sobre a manipulação de dados né sobre percorrer diferentes dados em programação é o uso dos imperadores ou seja não é um erro aqui de ortografia não seriam imperadores não tem a letra N Realmente são iteradores para falarmos de imperadores precisamos falar primeiro sobre interação então por favor me acompanhe nos slides que seria uma interação importante você saber que toda vez que nós falamos de interação internet como uma repetição e objetos que podem ser repetidos essa frase ela pode ser um pouco confusa mas acredito que vai ficar um pouco mais claro para você a partir de agora se eu tenho um presente para uma lista com cinco notas 15 estudantes eu quero percorrer por essa lista e quando fala percorrer imagine utilizando um loop né é utilizando um fórum é muito provável que você já tenha trabalhado com isso anteriormente Então essa repetição por essa lista né Eu quero pegar todos os elementos que estão na sala eu quero ler todos os nomes dos Estudantes que estão dentro de uma determinada lista Aí é um exemplo de interação também a gente consegue fazer isso com dicionários caso analisando todas as chaves daqueles dicionários e a partir dessas Chaves entender os elementos que estão dentro dessas Chaves A dos dicionários né também nós conseguimos trabalhar com interações em matrizes primeiro percorreu todas as minhas e depois percorreu todas as colunas também nós podemos fazer interações nos Data Frame se dá quando a gente fala que data creme vaginal aos dataframe do pandas então eu quero aí percorrer a também da mesma forma das matrizes todas as linhas e depois todas as colunas e por último e interação Strings quando nós falamos de interação string é basicamente ler letra a letra o melhor ler caractere a carácter de uma string então também assisto instalação interface nós podemos utilizar interações nessas estrofes então o conceito principal aqui a lei das interações na seria percorrer não seja percorrer pressupõe o uso de luz e por isso que eu trouxe essa analogia não é de assistir a um vídeo de cada vez o que que seria nessa para ficar um pouco mais claro Imagine que nós estamos você já criamos uma lista com 10 filmes que queiramos assistir aí essa lista desses 10 filmes naturalmente espera-se que não as estamos a esses 10 filmes ao mesmo tempo porque senão fica difícil de compreender o que está acontecendo Então parte-se da premissa que nós queremos percorrer por essa lista assistir um vídeo de cada vez e obedecendo a ordem instalar ou não necessariamente na ordem que está lá Mas queremos principalmente acessar o nome de um filme um filme de cada vez Então por isso não é desse dentro do não estamos lendo ao mesmo tempo nós estamos consultando ao mesmo tempo assim sendo um de cada vez se houver descendo toda toda aquele contexto né que nós estamos acessando todas a lista Aí de alimentos que estamos assistindo outros exemplos como se faz enxergar aqui na tela no slide ela consegue ver primeiro um exemplo de uma lista com números então tem Laura 0 1 2 3 e 5 deixa eu tenho aqui no segundo exemplo eu tenho aí um conjunto de aulas e por último e eu tenho um conjunto de caracteres até por que em conjunto formam o Sprint O primeiro exemplo até o que seria uma interação por essa lista né então já comentando o que seria essa informação aqui primeiro nós lemos esse 0 aí depois nós lemos esse um Depois nós vemos o outro 1 depois 2 depois 3 e assim por diante até chegar aqui no 55 então eu não falamos de interação Eller indicada vez a mesma coisa que para as aulas não posso primeiro ler né o acessar a sala 1 depois eu vou aqui para aula 2 3 4 5 e 6 chegando aí no final dessa lista e por último que é um exemplo de uma Spring não tem uma string 16 caracteres que em conjunto formam a palavra Python e quando a gente faz a interação por assistindo eu estou lendo letra a letra uma de cada vez tão primeira letra P depois a y at para chegar na no final das contas então todos esses aqui são exemplos de interações que nós conseguimos fazer a tão interessante que você saiba né que existem dois tipos de imperadores os meninos dão quando fala Imperador finito a é muito provável que se já tem implementado com for Will são a elementos em que a gente vai lendo caso a caso não seja item a item de um elemento de um conjunto de dados e TV por exemplo estou lendo elemento a elemento de uma lista até chegar no final da lista estourando caractere de uma string

o meu termo chave aqui é até chegar no final chegamos no final daquela lista chegamos no final daquela stream acabou a interação porque acabou a lista então por isso que eu não meter a dor finito mas também temos iteradores infinitos então a gente consegue percorrer uma lista repetidamente até que algum motivo a nós queremos cancelar aquela execução Então esse carro escolar exemplo e a esse esse primeiro aqui mas que a gente falamos Qual que é o ponto de partida e quais serão os autos dessas interações Então isso é que pode ser lido como eu quero contar todos os números a partir de 0 pulando de 2 em 2 ou seja zero depois vem 2 4 6 8 10 12 14 16 eu posso continuar falando aqui infinitamente até que algum motivo externo naquele que essa Contagem seja cancelada Então esse é o primeiro a primeira aplicação a outra eu saco o saco imagina que ele vai seguir exatamente aqui nessa lista de elementos até chegar no final de secção chegou na no final da execução ele volta aqui para o começo e assim infinitamente Então esse centro aqui o saiko 0 1 e 2 e começa como está na ordem que zero 12 chegou no 2 Volta lá para 1001 2011/2012 até que algo também não motivo alheio a finalizar essa execução aqui e por último nascemos repeti desde que o sapo e o hospital no sistema sintáxi bem parecida na São os mesmos elementos nesse caso aqui estamos trabalhando com 0 1 e 2 menos 2 a diferença do herpes é que ele vai repetir todo esse conjunto aqui infinitas vezes eu não é que eu novamente dentro do saco e 012 chegou no final volta no começo 012 chegou no final volta no começo o espírito não ele pega tudo aqui bloco de informações ou seja do 0 até o 20 em finito às vezes são mais de 0820202 até chegar no final só isso percebeu essa singela diferença por esse colchão aqui e lá no saco não tem então é que eu estou repetindo uma lista na Estou criando um conjunto de listas e que não são os números de uma forma corrida então novamente esses três são exemplos de imperadores infinitos e nós conseguimos trabalhar em Python para fazer aplicações diferentes um do alho por exemplo eu posso querer processar aquela lista infinitamente então Posso começar com Country e contando até chegar a por exemplo de 30 segundos em participar o número que chegou eu vou encerrar minha contagem de 10 segundos a mesma coisa ou chegou no um bilhão quero parar minha Contagem então é aqui são alguns exemplos bem simples de aplicação desses imperadores infinitos bem como os fenícios como comentamos anteriormente beleza um outro cenário na outra aplicação bem útil de trabalharmos com E terá vez não reconhecer objetos em Python ação cominatória para ficar um pouco mais claro exemplo de combinatorios me acompanha que nos slides por favor quando falamos aqui combinatorios é o melhor de combinações imagine temos em um conjunto de elementos em uma lista alguma coisa assim eu tenho um na granja e quantidade de casos em que a ordem deles não importa Então até aqui o sinônimo que nós trazemos seria quando a gente quer escolher ou selecionar elementos Isso é um sim alguns casos específicos eu posso ser uma turma com 30 colegas na com 30 estudantes eu quero gerar combinações de trios então como é um trio né aí o pessoal vai trabalhar em conjunto Não importa se eu escolhi o primeiro a pessoa ah depois a b e a c b e a porta ordem porque o que importa de fato até aquele Trio naquele conjunto de pessoas formado então isso mas eu pedi combinação novamente quando eu preciso escolher pessoas e a ordem delas a precedência delas não importa Então sempre que a ordem não importado estamos falando aqui de combinações outro exemplo né eu posso criar às vezes algoritmo em Python que eu tenho lá um conjunto de pessoas que mudaram comentários de uma rede social eu quero escolher cinco pessoas de forma aleatória uma combinação dessas combinações de 5 pessoas para ganhar um prêmio então também a gente pode utilizar as combinações para isso Ou não tem um conjunto de pessoas que moram em um condomínio e eu preciso aqui escolher um conselho de pessoas esse conselho de pessoas de todas as 100 200 300 pessoas que estão nesse Condomínio o conselho Seria somente de sete pessoas escolhidas aleatoriamente não importa a ordem dessas 7 pessoas por que é um conselho Não é um é um conjunto de pessoas que com próprio nome diz trabalham em conjunto Então essas sete pessoas também entram no universo das combinações outros casos né Você pode Às vezes tem interesse por jogos treinar envie um jogo de futebol e você quer escolher as combinações diferentes de pessoas dentro dos jogadores para formar times diferentes também é uma outra aplicação de combinações partindo da premissa que não importa muito a posição em que as pessoas jogam no time contanto que estejam em conjunto em uma equipe então também Aí é outro caso de aplicações o cenário aqui novamente pensando nessa palavra chave de escolher ou selecionar elementos é realmente pegar a lei de uma lista até mesmo de uma matriz ou a outra elementos de dados entendeu o que que a gente consegue gerar e nascer de conjuntos para conseguir parar com isso para ser realmente um exemplo que eu já vi na Já presenciei de aplicação de combinações É um cenário chamado otimização de hiperparâmetros o que seria a utilização de parâmetros endereço em machine learning existem bom Nós criamos algoritmos preditivos e onde esses algoritmos preditivos como sendo a um grande conjunto de combinações de parâmetros para chegarmos aí em resultado em uma flexão então pensando nessas expedições eu posso ter por exemplo um algoritmo que se chama renoforce não sejam conjunto de árvores de decisão Em que eu posso melhorar operar performance dependendo da quantidade de árvores que nasce lecionamos não é somente isso eu posso ir lá parâmetros como a loja que nós utilizamos para chegar na pressão eu posso ter às vezes para manter uma taxa de aprendizagem eu posso ter até a quantidade de processadores que estão em utilização Então são vários parâmetros são hiperparâmetros na utilizamos para tentar chegar na melhor aí médica possível mais rápido possível naturalmente posso ter diferentes combinações aqui também então eu posso te apresento 50 100 150 200 500 árvores diferentes Posso combinar isso com faixas de tolerância e diferentes Posso combinar isso com um conjunto de níveis diferentes das Árvores de decisão posso escolher 3 4 5 e 7 níveis diferentes e quando a gente começa a combinar esses diferentes configurações eu posso ter também várias combinações então aqui também pode ser um caso de uso né que eu falei dessas combinações para entender como que nós conseguiremos chegar no melhor resultado possível sem ter que ficar colocando de uma forma manual todas as combinações com falei possíveis a gente não quebra não mexi colocado sem árvores de decisão para mim sem árvores de decisão critério de parada 0.0013 níveis a mesma coisa quatro níveis cinco níveis de novo fazer com 200 árvores 300 árvores gigantesca Então para que consigamos resolver isso de uma forma inteligente existem aí essas a implementação na utilização de combinações para realmente chegarmos a inação geração de uma forma mais inteligente beleza mais caro né isso aqui é um exemplo de um somente dessa aplicação de combinações existem casos de uso seja na estatística seja isento análise de jogos também nesses exemplos também de escolha Ned seleção de indivíduos nas pessoas utilizando algoritmos também temos aí aplicações de combinações tudo bem agora uma outra combinação é uma variante aí que nós temos dessas combinações são as permutações lembre mais uma vez que quando falamos de combinações a ordem não importa então naturalmente as permutações é tendo sair no diferença que a justamente em que a ordem importa me acompanha aqui no slide por favor então basicamente Finanças permutações temos a mesma premissa temos um conjunto de elementos com esse nós queremos escolher um conjunto menor é um subconjunto de elementos e aqui nesse caso a ordem importa então de novo a palavra que chave das permutações são seria a ordem exemplos clássicos aqui eu tenho um conjunto de competidores E pelo fato de serem competidores estão em uma competição nas olimpíadas né ou qualquer outra competição atlética nesse sentido e nós precisamos entender que combinações nós temos mas respeitando a ordem então tem lá cinco competidores eu posso ter o competidor é um competidor aqui em primeiro lugar competidor Becker em seu lugar ou competidor ser que nem terceiro lugar esse aqui é um exemplo outro caso válido de permutação seria se você ficasse em primeiro lugar o bebê ficar sem segundo lugar eu acho que esse terceiro lugar ou ainda não é uma terceira permutação Se você ficasse em primeiro lugar ainda mas odeio a trocassem de lugar entre si e já em combinações Não importa se eu abri o segundo em primeiro segundo e terceiro tudo isso dá uma só combinação permutação e gente já geram diferentes exemplos que se pensássemos do.bicho.em combinação em ordem não importa 300 repetidos aqui não aqui é ordem realmente importa então outra casa que caso de agendamento de ordem mesmos elementos como eu dei aí de arranjo dos elementos uma falei da do caso das competições mas essa parte que dá agendamento gostaria que ficasse mais caro para você você já deve ter percebido nessa região e sistemas bancários seja até em termos de atendimento em Xaxim seja em termos de atendimento em hospitais e até mesmo escalas de pessoas que vão trabalhar em fábricas em que Esse agendamento é a ordem como eu falei importa então eu posso acabar gerando por exemplo permutações de clientes ou pacientes aguardando atendimento em hospital e nessa permutação eu posso tentar entender que combinações existem de uma forma que eu consigo atender pessoas prioritárias mas também pessoas que já estão esperando lá na feira um bom tempo porque pensando assim de uma forma pragmática não posso ter locais de atendimento em que eu sempre tem pessoas que chegam merecem atendimento preferencial que sempre estão sendo atendidos em primeiro encontro isso outras pessoas vão sendo Deixados para Trás então no final das contas eu posso ter pessoas que estão aguardando a muitas e muitas horas por atendimento e quem acabou de chegar sempre atendido primeiro às vezes esse extremo né não seria tão desejado já viu a gente quer Balancear os dois casos realmente atendeu mais rápido possível pessoas que tem um atendimento preferencial mas também precisamos diminuir a fila né então pessoas que não não precisa não tem jornal preferencial elas precisam ser atendidas o mais rápido possível também com o devido respeito a essa essa preferência ou não preferência Então para entendermos que combinações existem em que essa ordem é respeitada temos aí também um bom caso de permutações na Então como que a gente consegue quais as permutações são possíveis e a partir dessas permutações como que nós conseguimos sair calcular corretamente Quem deve vir primeiro ou não outro caso que também permutações são úteis existe uma área ela fica entre matemática entre Inteligência Artificial que se chama a utilização a essa área chamada otimização ela possui suas sub áreas e uma dessas sobre áries são os algoritmos evolucionários que seria esses algoritmos evolucionários parte bem nas premissas aqui do agendamento também a imagine por exemplo E nós queremos encontrar a rota mais rápida do local que você está até o aeroporto no estádio de futebol algum ponto do seu interesse você deve concordar comigo que existem infinitas combinações para chegar nesse local eu posso virar na próxima rua à esquerda ou na próxima rua à direita ou então na segunda rua na terceira rua se eu fosse desenhar a todas as combinações eu pintaria todo o mapa da cidade mas mesmo assim ela não conseguia contar de tantas combinações que existem Então essas permutações ou melhor com esses algoritmos evolucionários nós conseguimos gerar algumas combinações iniciais demorar muito tempo a outra pode ir para uma sua que não tem assim muito sentido ou fazer muitas voltas e algumas dessas combinações que não fazem sentido eu posso tentar entender Quais delas acabam chegando mais rápido no destino ainda que não seja a solução ideal a partir dessas melhores soluções nós tentamos trocar um pouquinho na algumas coisas em relação a rota alcontece ser verso da terceira rua virar à direita se eu continuar reta vou melhorar um pouco tempo vou piorar ele vai tentando diferentes combinações tá fazendo essas pequenas permutações ouija ordem importa até e melhorando esses caminhos primeira geração na primeira grande combinação de rodas que foram gerados elas eram muito ruins não chegavam no lugar eu era muito rápido Desculpa era muito lento enfim rotas que não poderiam ser utilizadas no dia a dia encontramos as pequenas permutações nessa rota ou nas melhores fotos que poderiam chegar a melhores soluções de uma segunda geração a partir desta 2ª geração quando falou geração a combinação realmente aí de injeções uma combinação diferente de rotas nós temos a resultados um pouco melhores mas muito fora do que a gostaríamos de fato fazemos novas permutações e com isso vamos melhorando melhorando melhorando até chegar aí realmente nas melhores soluções possíveis para aquele contexto Então as permutações nação exemplo prático para esse tipo de geração a área de utilização utilizado para a indústria são cores que são utilizados na indústria tanto fábricas na conta na indústria espacial para design realmente aí de aviões sistemas de qualidade de água utilizados para própria roteirização na Itaú espera aí um navegador no GPS ele vai utilizar uma solução Bem parecida com isso Ah então assim são diferentes aplicações que envolvem algoritmos que fazem uso a gente por mutações não necessariamente que você vá trabalhar com permutações mas que você é importante que saiba que elas existem aquelas que possuem uma aplicação muito útil no contexto de desenvolvimento de software imagina esse exemplo que o DNA das costas das permutações Como que você faria isso com algoritmos de um jeito que chega uma solução rápida para que não fique várias horas e horas carregando então é um problema realmente de algoritmos é um problema de desenvolvimento de software então é esse ponto aqui é a sua mutação exemplos com ao mesmo tempo atender mas que também é interessante saber como ter uma boa performance não é para conseguir gerar essas diferentes permutações beleza Ele é bem importante é bem interessante de trabalhar mas porque expandido mais visualizou nosso ponto de vista de telha em guagem de programação no caso são geradores então por favor me acompanhe nos slides basicamente a definição de geradores são funções não lembro que são funções né começa o que é a palavra-chave Def em Python E aí eu posso ter parâmetros eu posso ou não ter o retorno então os geradores são funções que não Retornam valores ou seja naquela função eu não tenho um eterno mas se ele vai ele vai nos fornecer um interruptor não seja um iterador então lembre-se que são funções no que são iteradores então gerador ele serve para isso e também ele tem uma uma um atributo que é bem interessante de considerarmos aqui que é o lazy loading lazy loading World em uma tradução bem É espalhafatosa né seria um carregamento preguiçoso é porque no final nós não temos como resultado os dados naquele momento mas se ele já fica pronto para utilizar um Se quisermos ou quando tivermos algum interesse para ficar mais claro e acompanha aqui neste código específico o que seria esse código tá pegar que o laser também temos uma função Então essa função assume as dívidas linhas até linha 10 que se chama gerar recibos então pelo próprio nome aqui dessa função nós estamos aí é gerando é uma quantidade de recibos quantidade de cílios ela pode ser bem baixa ou bem alta transporte que temos aqui um parâmetro chamado limite se nós lemos esse código primeiro estamos definindo o contador igual uma lista vazia de rifas enquanto o contador que começa em um ele não alcança esse limite ele vai incluindo elementos nessa lista chamada recibos até chegar no final seja até chegar no limite e aí nós retornamos essa lista completa de Recifes na prática colocamos um gerar recibos igual 10 no final nós temos uma lista com os valores 1 2 3 4 5 até chegar aí no caso até chegar no 9 né como contador e Menor igual ao limite então é para isso que serve essa função você pode vir aqui embaixo que temos aqui gerar recibos especificamente nessa linha 13 com número Altíssimo na então na casa dos bilhões na casa dos trilhões se você testar esse código no seu próprio computador você vai chegar no momento que é que vai dar erro vai dar erro por estouro de memória não importa se você tem às vezes 48 até 16GB até mais do que isso de memória no seu computador ele vai dar um estouro de memória porque ele chegou em um momento em que tem um vetor na temos aí uma lista que ela tão grande tão grande em que a informação ela já ficou lá enfim não tem mais espaço para armazenar então acabou a memória se não consegue avançar aqui da linha 14 linha 22 seja Pará né aqui nessa linha 13 por conta de um erro agora o que é importante tá antes de pensarmos muito nesse erro de falta de memória vamos ver o que vem pela frente afinal de contas vamos supor que temos toda a memória é possível do universo e queremos entender para que que serve sua lista de recibos nelas pode vir aqui na linha 13 tem uma lista recibos recebe o resultado dessa função ou seja no final teremos aí nessa vida dessa linha 13 uma lista enorme na cheia de números aqui na linha 14 que nós começamos uma contagem temos aqui um fora ou seja vamos passar item a item dessa lista de resíduos e vamos mostrar o número na tela Porém isso pode vir aqui na linha 21 e 22 que a gente só vai mostrar na tela os 10 primeiros números ou seja limpar desse aqui gente gerou um milhão um bilhão um trilhão de recibo assinado Gerais 500 mil não importa a quantidade no final o nosso interesse Seria somente uma dessas Então vamos pensar um pouquinho esquece não pouco código e vamos pensar na prática faz sentido temos um esforço gastar memória travado no computador para gerar uma lista que tem tantos elementos será tão grande se nós vamos mostrar 10 elementos no fim das contas faz sentido isso ou não ser que nós não podemos controlar aquela linha 13 a não podemos controlar a quantidade de recibos mas a gente sabe que a única certeza que não vamos utilizar todos aqueles elementos Então como que a gente consegue criar uma lista tão grande de elementos no caso Esse milhão bilhão trilhão e a gente só utiliza um pouco espaço no faixas informações não é para isso que serve os geradores e acompanha kit novo no slides por favor só DP na linha 10 que está realçada e amarelo essa palavra chave ou então desde que ela vai mudar a partir de agora então vou avançar aqui para o próximo é o mesmo código né olha só tem um gerar recibos e agora estou chamando ele de gerar recibos generator para não ficar tão confusa que a compreensão nos primeiros nos prendermos nessas últimas linhas Então vou retornar um aqui veja que eu sempre tenho lista recibos na lista recibos em um número muito alto de recibos eu tenho que um contador começa no zero eu tenho um fora no caso somente mostrarei 10 segundos Então essas últimas linhas aqui é assimilando as últimas três quatro cinco seis sete oito dessas últimas 10 linhas Elas serão mantidas aqui sozinho lista recibos tem um carro e tem um forte que você acompanhar um lado do outro que é exatamente a mesma coisa que tão tudo que veio aqui ó da linha 818 é exatamente o que você está vendo aqui na linha 13 22 então Mudou alguma coisa antes disso mudou e se gerar recibos veja que esse gerar recibos generator primeira coisa ele não tem mais ele tem ele tem um lugar palavra chamada Yuki Então a primeira grande substituição é isso Wilder indica aquele Deise ele lazy loading net conta anteriormente essa carga é mais preguiçosa que eu comecei anteriormente desde que esse daqui ele e também não tem mais aquela lista né não tem mais o apêndice só tem esse recibo o contador como que isso funciona na prática esse Yudi ele vai na verdade retornável como se fosse uma capacidade para esperarmos dentro dessa lista Então a gente vai percorrer elas somente os elementos que precisamos se você rodar esse código aqui será que conseguir assim rodar ele não terá nenhum erro no seu computador e o Yuri ele vai lhe parece que a gente só consumir a os valores enquanto precisar e até o momento que ele precisar Então não é que ele está carregando de um até um milhão bilhão trilhão dentro aquela função dentro daquela daquela caixinha né e tão logo ela termina de carregar o bilhete trilhão ela retorna O pacote fechado não pensando novamente analogias Imagina isso como sendo dois restaurantes diferentes esse restaurante aqui nós estamos pedindo envie um uma grande quantidade de pratos em uma mesa gigantesca e o pessoal somente entregar a todos os pedidos na mesa quando tudo estiver pronto lá na cozinha Então se tem 30 pessoas para mesa e todo mundo pediu sobremesa já pediu a entrada pediu o salário inicial todo mundo me fez todos os pedidos possíveis bebidas e cinco gente o pessoal só vai entregar na mesa quando tudo estiver pronto como você deve imaginar né dependendo do restaurante tem pessoas que vão receber já comida fria tem pessoas que enfim mas sim um monte de cobra Tudo junto não tem como carregar tudo aquilo porque são muitas pessoas muitos pratos mais pedidos em um único lugar então vai ser difícil de gerenciar tudo isso que leva aquele estouro de memória né que comentamos aqui no algoritmo se a gente parar um pouquinho para pensar às vezes não precisamos fazer toda essa carga vale a pena primeiro leva só as bebidas aí tão logo né tem aí um prato uma salada Pronto já começa a servir o pessoal eu não faz sentido e aqui eu acho o termo né Seria algo não fazer sentido Nós não precisamos entregar tudo isso porque não Experimente todo mundo está na mesma e comer ao mesmo tempo a sobremesa e prato principal e nem todo mundo na mesa vai comer a sobremesa e vai tomar bebida Almeida no tempo então dá para fazer isso em partes até o momento em que é necessário chegar aí o próximo passo wield ele nos ajuda nesse sentido é humilde né Ele atende essa analogia do vamos levando na mesa aquilo que o pessoal vai pedindo enquanto estiverem pedindo se você rodar não aparece lista recibos Será que ele não é mais uma lista e sim um interruptor na a gente consegue fazer essa interação por excessivos então nós conseguimos trabalhar dentro aqui desse forte e chegou no 10 ele já nem continua com essa carga aqui então o dele para de processar ele parou no 10 e com isso a gente tem uma lista muito mais enxuta Então acho que que a grande diferença eu sei que na explicação pode não ficar muito claro nessa diferença entre o entre um e outro então o que que eu sugiro o código lá naquela lista gigantesca conte-me um pouco número não quero mais gerar recibos um bilhão trilhão né esse número grande colocam Gerais sebos em E aí no final esquece a minha 14:22 só coloca um print lista recibos O que que você enxerga Muito provavelmente acelerar uma lista com 100 alimentos aí faça a mesma coisa que faça um print lista recibo onde Estacionei 19 o que que muda entre um e outro quando se for visualizar Será que não necessariamente você verá os mesmos resultados Mas você conseguirá ver AB nasce conseguir haver uma mudança no uso da memória só conseguirá ver nenhuma diferença até para manipulação dos dados e os pode ser muito útil para proteger e aplicações que tem uma realmente uma performance interessante Quando pensamos em desenvolvimento de backend quando Nós pensamos em desenvolvimento de aplicações científicas sim são vários os casos que a gente pode trabalhar com um grande conjunto de dados quando estamos trabalhando com grande conjunto de dados pode ser preferido que nós utilizamos um direito porque não precisamos de toda aquela base ao mesmo tempo em todas as aplicações possíveis então é por isso que na nossa apresentamos este tópico aqui para você beleza uma das coisas que você já deve ter muito contato seja em paz então qualquer outra linguagem de programação são os operadores Então vamos primeiro relembrar um pouquinho que são esses operadores para ir sim conseguimos falar um pouco mais sobre essa sobrecarga deles beleza é um dito isso por favor me acompanha aqui nos slides quando nós falamos de operadores são esses Símbolos na aritmética se você já deve ter muito contato até o momento mas não somente eles então exemplo assim muito simples é o mais ou menos multiplicação a gestão ir para TS porcentagem do resto de uma divisão até mesmo para elevar números fazer 12 Ao Cubo 115 a sétima potência tem o Léo maior que menor que enfim Então são todas essas esses operadores que como eu falei assim já deve ter contado não necessariamente um todos eles mas que enfim fazem operações primariamente ele comeu matemático mas também a gente pode ter em operações lógicas né esse carinha aqui por exemplo em muitas linguagens de programação ele pode ser utilizado para aplicações que envolvam o e-mail É lógico ou lógico então Existem algumas aplicações também nesse sentido até mesmo negação e assim para gente também existem funções que no fim das contas elas acabam e trabalhando com a como operadores exemplo prático que esse povo é que seria é um Power não é para elevar um número a uma determinada potência Então esse povo aqui ele é muito parecido com esses dois asteriscos que você enxerga que são resumidamente quando estamos de operadores são esses símbolos aqui agora o que que seria se sobrecarga na internet alguns exemplos que são muito práticos né são muito alto explicativos para você mas por exemplo 1 + 5 você sabe que o resultado de uma soma né Você conhece o que que é esse símbolo dessa dessa pequena Cruz sabe o quê que Ela implica quando eu tenho dois números próximos dela então você como um ser humano né pelo seu contexto você sabe o que que significa esse símbolo aqui a mesma coisa quando tem essa Barrinha Então se sabe que essa Barrinha quando eu estou entre dois números indicam que é uma divisão entre dois números então um dividido por 4 restaura 0.25 porque uma divisão que eu falei entre dois números até que tudo bem agora é o buraco começa a ficar mais embaixo quando nós estamos tratando de variáveis que não são exatamente os números que estamos acostumados o que seria por exemplo a soma de maçã com batata dependendo da pessoa que você perguntar se eu tenho uma resposta muito educada porque ou não faria sentido ou às vezes é Siri até um prato da culinária que para mim pelo menos ele é desconhecido então o resultado de maçã mais batata não é tão Lógico né Não Faz Sentido para várias pessoas agora que é 1 + 5 e independentemente das soas que você foi perguntar né do cargo delas do curso delas a resposta espera se pelo menos que seja basicamente a mesma disse que o resultado seja 16 então a sobrecarga de uma forma bem simples né mas para que você compreenda é basicamente assim como conseguimos utilizar operadores aqueles operadores que nós vimos até agora para somar para trabalhar com coisas né para trabalhar em diferentes variáveis diferentes daquela aplicação original que elas foram desenvolvidas Originalmente dão exemplo aqui não é um mais um mais ele foi desenvolvido Originalmente para somar números até porque número 61 é o 2 + 5 + 52 + 7 e 20 + 10 e 5 gente então não é esse símbolo aí Originalmente eles toma agora o que que o pai estão nela qualquer outra linguagem de programação deve fazer quando se quer somar dois terços duas Strings se deve com catedral.da se deve não sei estou mais número ao valor deles e gerar uma nova stream que que você quer fazer com uma soma de textos então é para isso aí que atendem a essa sobrecarga de operadores senão não necessariamente só contextos eu posso fazer aí por exemplo é uma divisão entre listas eu posso tomar um texto com número e aí com isso gente pode customizar né Nós podemos criar nossas nossas nossas próprias sobrecarga de operadores para que usar algoritmos na parte que o pai ou qualquer outra linguagem de programação Que ela possa manipular da forma que nós queremos essas diferentes variáveis nesse exemplo aqui na do Marcelo batata no país então a gente pode fazer essa concatenação de texto Então se você colocar uma maçã mas batatas PT resultado isso aqui uma única string chamada maçã batata tudo junto sem espaço então isso daqui é o que programação de entrada objetos quando Nós criamos nossos próprios objetos isso daqui já não está enfrentado então este exemplo de uma sem batata que já existiu no quarto né já está coberto para stream mas não está para uma classe que você possa criar chamada bicicleta né que vai acontecer se você a criar uma classe em cima da bicicleta que dá se tomar dois objetos chamados bicicleta que que deve acontecer no final das contas Então você consegue a possibilitar essa capacidade Airton se você quiser com operações que você acha que façam sentido naquele contexto específico se os chamados bicicletas o que que você quer no fim das contas esquece tomar velocidade deles dessas desses dois objetos nos relacionar os nomes nas concatenar os nomes que você que é enfim juntar realmente duas bicicletas ou d'anglas em um único objeto que que você quer no final das contas né então isso é uma possibilidade que aqui é possível eu pela sobrecarga de operadores tá pegando até que outro exemplo não é da soma de cachorros então no slide você consegue identificar uma classe tem uma tem uma classe chamada cachorro se vai chover que eu tenho das minhas 1 até 7 eu estou eu tenho aqui né 2 2m um deles eu estou lendo a idade daquele cachorro e outras inicializando objeto cachorro tem uma posso definir o nome daquele cachorro e a idade daquele cachorro nas minhas 10:11 eu estou então instanciando dois objetos da classe cachorro um deles é um objeto chamado pipoca e outro chamado cor é o objeto pipoca então ele tem o nome pipoca eu sei disso porque o primeiro parâmetro aqui da classe é o nome dela é só tá batendo pipoca com o nome e a idade 9 que baixa aqui com essa idade que estamos visualizando aqui que por padrão seria 0 Não beleza eu tenho pipoca né que um objeto cachorro come pipoca e da 19 O outro tem um outro objeto distanciando aí da classe cachorro chamado cora.com idade um agora o que que seria o pipoca mais cara né O que é o resultado que que você imagina que ele deveria ser o que que é como é que o pai com deveria tratar isso se você está criando uma nova classe em nenhum momento você está falando o quê que eu pipoca mais cara deve fazer o que deve ter como resultado ele vai dar um erro para você que não é bom porque você fala assim eu não sei o que que você quer fazer com essa soma né Você quer sua idade você assuma o nomes que é criar a outro objeto o que que você quer no fim das contas então para isso a gente consegue implementar vai fazer essa sobrecarga desse operador e se deu mais para ser compatível não é para trabalhar com essa classe e cachorro essa sobrecarga você consegue ver aqui na linhas 911 que nós estamos implementando sobrecarga de operadores primeiro.de Julho que é uma nova função é o novo método esse novo M ele tem aqui primeiros dois no meu score na então descobre descobre também mais dois números Corsa essa nomenclatura que ela específica do Python então se você quer criar uma função que ela vai determinar o que que nós queremos fazer de uma soma dessa classe cachorro e sinal de mais lhe corresponde a esse Mas também tenho por exemplo outra para subtração outro para trás divisão explicação e várias outras funções aí é específicas desculpa vários outros métodos específicos aqui para gente fazer a sobrecarga com outros operadores mas é de sinal aqui demais né ele seria a essa função rede ela vai receber esse próprio objeto seja influenciado no cachorro e outro cachorro e no final a gente vai estabelecer né Nós vamos implementar o que queremos fazer com esses dois objetos os pais de penaguião 11 e nada mais é do que a soma da idade dos cachorros então a gente não quer concatenar o nome dos dois a gente não quer produzir um terceiro objeto chamado o cachorro não a gente só quer somar a idade dos dois então agora sim vai funcionar esse código se fizer um pipoca máscara no final do sorteio 10 por que a soma da idade dos dois se quisesse eu também poderia criar uma sobrecarga de operadores de subtração D multiplicação e assim por diante de Outras aplicações isso poderia ser útil eu posso ter por exemplo de uma aplicação de Internet Banking uma classe chamada cliente eu posso às vezes querer É somar o saldo dessas duas contas de dois clientes de dois clientes diferentes se estou criando uma nova classe desse cliente eu não necessariamente eu vou aí mas nós conseguimos implementar essa sobrecarga de operadores seja para entender quem Dele qual será o resultado da soma do saldo dos dois ou se você entende que a soma ela deve ser do tempo em que os dois possuem conta no banco também pode dar um outro valor ou se você entende até uma comparação né cliente um é menor ou igual do que o cliente dois tal mas que que você entende como menor igual e Menor igual pelo pela idade é menor igual pelo saldo PIS pelo tempo que a pessoa está trabalhando com carteira assinada Então você consegue implementar novamente operadores vez que eu falei mais do menor igual pode ser uma subtração que você quiser utilizando aqui essa sobrecarga de operadores então isso pode ser muito útil para reduzir o seu trabalho quando está trabalhando com programa Sony tava objetos Especialmente na Claro que onde trabalhar fora e também da programação orientada a objetos mas para conseguir fazer essas operações E aí já tendo bons resultados e reduzindo a sua quantidade de linhas Ecológico como Esse costume né surgiram você implementar esses dois códigos ou seja antes dessa implementação aqui com contendo aquela sobrecarga do operador do mais na linha 13 e por último e replementar agora utilizando essa linha a essas linhas estão na cor amarelo ou seja o que que ostenta resultado anos Cite um erro agora não tem mais que Outras aplicações dos enxerga Tirando esse exemplo mais lógico do cachorro pega para o cliente no banco ou não fornecedores de uma determinada empresa Como que você conseguiu implementar no seu próprio contexto para definir ações sobre cargas de operador de filmes na tem uma classe chamada filme O que seria a soma entre dois filmes que que o cercam essa soma é a somar o tempo que de duração dos filmes é sonar nota dos filmes que tem algum site ou é uma média que que você quer Então veja que para cada um desses exemplos os consegue implementar sobrecarga de acordo com seu contexto específico tem por isso que não tem uma resposta é claro né a soma do cachorro sempre vai ser a soma das idades eu estou definindo dessa forma olhando para esse contexto Mas você pode muito bem ter que a soma dos meus cachos também poderia funcionar sem problema nenhum Beleza então é esse aí era o que é o que eu gostaria de mostrar para você sobre a sobrecarga de operadores eu espero que esse esse tópico possa ser muito útil aí para sua formação