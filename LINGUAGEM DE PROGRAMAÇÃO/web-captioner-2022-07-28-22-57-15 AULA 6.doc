muito bem vindo aqui temos Com intenção conversar sobre alguns tópicos que são bem interessantes para termos aí uma continuidade do nosso trabalho então sobre a comunidade por favor me acompanha aqui nos slides se pode ver que é um dos primeiros tópicos que temos aqui é o Google Home ou extreme go Horse Na verdade estou infeliz função exatamente uma metodologia que temos como por exemplo as metodologias ágeis dentro de ti mas é como se fosse uma piada não é uma sátira em relação a essas metodologias em resumo seria basicamente Ele trabalha que a gente faz sem planejamento sem pensar muito é sem pensamento no que acontecerá no futuro que tipo de erro poderá acontecer e nossa apenas abrimos lá o gerente de desenvolvimento de software começamos a criar qualquer software como falei sem pensar muito então A ideia é fugirmos um pouco disso é pensarmos em os futuros e quando a gente fala né e aplicações futuras de software pensando em quantas pessoas poderão utilizar lá na frente qual que é o volume de dados A e B poderá ocorrer no futuro né nesse aumento então quando a gente começa a falar nessa expansão de uso de um software qualquer software que seja a basicamente conheceremos aí a falar em tocas como otimização e concorrência quando falo né concorrência são exatamente a várias pessoas processos e fim utilizando determinado recurso computacional ao mesmo tempo escalabilidade que também incluiria e por exemplo ao mesmo software atende aí uma boa performance não importa quantos mais processos ou bases de dados teríamos aí processando ao mesmo tempo e por último e os protocolos interface claro né também no ponto de vista de Python a interessante conversarmos um pouco mais aí sobre o c Python e muito provavelmente você já esteja utilizando Mas pode ser que você nem tenha percebido isso ainda então acredito que é bem importante a conversar mas também sobre esse tópico com você beleza vamos lá

então primeiro toque o que você acha de conversarmos aqui é sobre otimização otimização pode ser algo um pouco confuso Porque dependendo da pessoa que você conversa só para ter uma compreensão diferente do que afinal de contas entende como otimização Então nesse sentido por favor me acompanha aqui nos slides quando falamos de otimização imagina Então temos duas grandes definições Claro não são somente essas mas essas aqui são os mais Gerais que nós encontramos aí com maior frequência quando estudamos sobre linguagens de programação Então a primeira que quando nós falamos de otimização de processos de desenvolvimento de software Ou seja a gente está falando né sobre a sua utilização da construção aí de um algoritmo ou também da forma que ele funcione a tentar deixar esse processo de construção de manutenção de software da forma mais otimizada possível e o segundo caso ele tem muito uma relação é muito maior com o software em si ou seja eficiente anel com bem Aquele algarismos performa em diferentes casos um exemplo prático é que é por exemplo algumas aplicações até mesmo de celular os pares perceber até mesmo no seu próprio aparelho aí no seu próprio aparelho celular que podem ter aplicações em aplicativos em que aparentemente eles deveriam e fazer uma tarefa muito simples seja né somente um jogo ou uma rede social muito simples alguma coisa assim e essa aplicação ela ela acaba travando muito o seu celular ou consumindo muita bateria ou até mesmo fazendo aí com que o seu celular ele trabalha um pouco mais e acaba emitindo muito calor então aí são alguns exemplos de até mesmo eficiência de algoritmos né Será que esse software não é esses aplicativos não estão consumindo muito mais energia fazendo esforço muito além do necessário para uma coisa tão simples tão isso aqui acaba né criando acaba as incluindo nesses exemplos de utilização de algoritmos tá nesse se sentiram gostaria de falar um pouco sobre o termo chamado complexidade na complexidade ele é um ele é um assunto que ele é bem trabalhado Principalmente nos cursos de ciência da computação às vezes também engenharia da computação e a que trata um pouco mais da complexidade matemática de um software de uma forma bem simplista é basicamente o esforço na cama só queria um determinado pedaço de código teria que fazer para completar uma operação ao infinito o que seria se o infinito imagine por exemplo que eu tenho que processar uma lista de 10 pessoas 15 pessoas a gente pode até cronometrar falar assim olha essa tarefa que era 1015 pessoas demorou um quarto de S 13 s e acaba sendo o tempo tão curto que até difícil né da gente quilômetros até mesmo sinal se trocássemos de um computador para outro até poderíamos ver pequenas diferenças mas mesmo assim poderia ser um pouco difícil de compararmos agora quando a gente aumenta muita quantidade aí sendo processada por exemplo um milhão um bilhão um trilhão de pessoas isso vai ter um tempo muito maior de processamento e acaba sendo mais simples de calcular nos isso essa complexidade ou seja tendendo ao infinito né que eu dei um valor bem alto no caso milhão bilhão trilhão mas se der tempo ao infinito se eu tivesse uma lista infinita de pessoas quanto tempo demoraria seria a cada não é 1000000 trilhões pessoas o tempo de processamento ele dobra triplica cresce exponencialmente como que é essa performance Então é isso que geralmente é estudado dentro desse tópico aqui de complexidade então aqui no slide os pais de ver três exemplos de funções no caso temos uma função que faz uma operação constante suas veias temos três funções aqui na linha 2 então é o nome de uma função chamada oração constante e ela vai receber uma lista de itens a outra se chama operação linear também vai receber exatamente a mesma lista de itens e operação quadrática também exatamente a mesma lista de itens o que vai mudar entre um e outro antes disso se pode perceber que no código nós temos aqui o mesmo retorno né então eu sempre vou retornar dois parâmetros O que é o contador ou seja na quantas vezes nós fizemos alguma operação e o outro aqui é a quantidade de itens aqui só falta uma pequena tabulação mas acredito que como você já trabalha com python a reconhece que a que esses espaçamentos eles tem um relacionamento com ordem de precedência com a ordem de onde é que um determinado código a começa ou termina por exemplo as linhas 11/12 elas ficam dentro de si for informado aqui pela Linha 10 então novamente temos três funções recebem o mesmo parâmetro de entrada que estreou itens

manipulado né ou seja o resultado dessa lista e por último e também nós temos o contador seja quantos quantas vezes um determinado código que fez uma operação ou seja não alteração constante ou seja na iniciando aqui pelas minhas 2 até 4 deixa no comentário que ele sempre vai retornar a metade do último número dessa lista ou seja seu informa que uma lista com cinco itens e desses cinco itens o valor do último elemento é 10 aqui eu vou calcular 5 O resultado é 5 por que a metade do último número pode ver por esses itens menos um que eu para mim não importa muita quantidade de elementos que tem dentro dessa lista de itens né eu posso ter 100 mil um milhão de itens eu sempre vou contar o último Então é como se nós for Assis Neto dessa fila e fossemos a indiretamente neste último e tem então não é dessa forma que nós interpretamos aqueles código como eu falei se tem cinco itens nós vamos direto no último número ignoramos o que os quatro primeiros se tivéssemos aí um milhão de itens também nós vamos aí direto consultar esse último elemento que fica lá na posição 999999 a mesma coisa se fosse uma lista infinita de GTA então a gente não ficaria processando todos eles vamos direto ao ponto aí no último valor já aqui nas linhas 7 a 13 nós temos uma operação que era chamada de linear porque a primeira coisa verde que tem um forte das Linhas 10 até o 12 então sem olhar muito códigos pode ver pelo forte ele vai percorrer todos os elementos de itens então se eu tenho aqui cinco elementos nessa lista itens eu vou percorrer aqui cinco vezes e se for se eu tenho um milhão de itens aqui eu vou percorrer um milhão de vezes essa esse fora então se pode ver que não importa o número de itens eu tenho vou percorrer exatamente Aquela quantidade de vezes aqui nesse forte se tem um milhão de vezes se eu tenho um bilhão em ferimentos dentro do itens eu vou percorrer aqui das linhas e 10 até 12 em 1 milhão de vezes se tem uma quantidade quase infinita de itens eu também vou percorrer aqui uma quantidade quase infinita de vezes eu acho que você já pegou a ideia né analisamos o Como que é o código para entender realmente a se nós tivéssemos uma quantidade muito alta de elementos quanto auxílio nosso esforço não é para analisar aqui Esta função e por último mas temos uma operação quadrática E por que que o nome é quadrática né você vai dizer primeira coisa comparando essa operação quadrática com operação linear e nós temos 2 formas ou seja nós estamos percorrendo a que o itens duas vezes então se eu tenho por exemplo uma lista de itens que tem 5 elementos eu percorro aqui da linha 20 a 20 e 25 vezes ele para cada uma dessas vezes cinco vezes cada 5 x 5 = 25 acima lista de itens estiverem aí sem elementos aqui vou percorrer 100 vezes 100 vezes se eu tiver um milhão de elementos aqui em itens também vou percorrer um milhão vezes um milhão de anos pode ver que fazendo pouco esforço a nossa quantidade de operações sendo feitas dentro dessa função ainda que nós adicionamos a ele uma das leis e códigos ela aumenta muito então por isso que é importante essas termos atenção com essas funções de complexidade Por que pode ser existe uma possibilidade que se você está trabalhando profissionalmente com desenvolvimento de software a você verá que tem funções que Você percorre muito rápido e tem outras que dependendo da complexidade na operação sua demorar muito tempo para sair aquela função Então dessa forma você também consegue identificar possíveis ficar galos na sua operação então nessa parte eu às vezes na base de código muito grande ou seja muitas linhas e códigos e às vezes tem uma duas linhas que podem ser a culpada né por fazer com que o seu código acabei demorando muito tempo para fazer uma operação que segundo você poderia ser muito simples de novo olhando essas três funções Lemos ciclanos alteração constante linear e quadrática verde que odeia algumas explicações em relação a números de alguns exemplos para isso não mostrei nada então por favor me acompanha aqui mais uma vez esse gráfico ele é exatamente o exemplo daquelas funções que eu comentei anteriormente então você pode ver que eu tenho uma linha essa constante que praticamente uma linha reta pode ver que as três aquelas começam praticamente no mesmo local e elas e essa linha né do da operação constante ela seria até o infinito né a reta Então eu sempre 10 itens 21 milhões de essa linha ela atenderá ao infinito de uma forma reta por outro lado essa outra linha que operação linear pode ver que ela começa a crescer na Então ela começa a descolar né da linha constante ou Farm vamos aumentando a quantidade de itens uma coisa que eu gostaria de chamar sua atenção é escala desse gráfico vejo que a quantidade de itens a 0 até 25 mas aqui os cálculos vai iria de 0 até 600 então se eu achasse esse gráfico na colocasse do 0 até o 25 e não até os 600 você viria que essa linha aqui laranja ela na verdade seria esse comportamento que eu estou fazendo aqui com meu pai ter né é com essa bolinha aqui vermelha que mitaram laser então ela vai aumentando exatamente com a quantidade de cálculos então aqui próximo do 25 também seria próximo de 25 cálculos se eu tivesse 100 itens também estaria aí com sem cálculos e assim sucessivamente por outro lado pode ver que que é operação da a nossa operação quadrática ela cresce de uma forma exponencial então de novo ela começava de uma forma Quase colada né com as outras duas linhas e rapidamente ela digitou e vai aumentando muito Então olha só essa diferença com cinco itens eu tenho aqui bem menos de 100 cálculos Porém quando essa Dobra a quantidade de itens eu aumento várias vezes a quantidade de cálculos Olha a diferença aqui de 10 itens por exemplo para 20 eu tenho que eu pulo praticamente de 100 cálculos para mais de 300 esperando aí 400 cálculos Então como você deve imaginar se eu tivesse 100 itens praticamente nem conseguimos enxergar as outras duas linhas de tão grande aí seria a nossa diferença na quantidade de cálculos Então entendo que Esse aspecto aqui a da complexidade dos algoritmos é uma informação bem interessante para que você tenha acesso aqui também é outro exemplo eu vou repassar né algumas vezes por isso mas acho que é bem legal para nossa visualização o que que eu gostaria que você olhasse primeiro Tá novamente nós de ar observaremos aqui este essa animação de novo nós temos alguns algumas formas de ordenação de algoritmos então tudo que você está enxergando aqui em cima das colunas é Mister Chan o select no Google e assim por diante são métodos de ordenação de valores transgênicos são ordenados mil elementos um milhão de elementos de uma lista então todos eles podem começar de uma forma aleatória Mas algumas das lógicas para um funcionário de uma forma mais rápida do que outras então por exemplo né agora acompanhando aqui é só dizer que sim Fashion ele tá sendo bem mais rápido para ordenar os elementos que esse celular mas às vezes selection por sua vez pode ser mais demorado né o mais rápido que outros métodos e Aqui nós temos algumas formas de ordenação né como que as listas começaram então aqui na nossa primeira linha eu tenho tenho listas que começaram de uma forma bem aleatório né foram ordenadas o melhor desordenada sinais de um jeito bem aleatório aqui no segundo temos casos que estão quase completamente ordenados não tem um outro item fora de linha mas de uma forma geral eles estão como eu falei quase que ordenados a que se houvesse ele já estava ordenada para encher uma ordem de uma forma invertida então é que nós estamos praticamente né só invertendo ou revertendo essa lista e esse filme eu tenho vários valores que estão repetidos então ele também tenta ordenadas de maneira então eu gostaria com calma né que você observasse a seguir pode avançar voltar o vídeo acho que é importante que entender como que eles esses diferentes algoritmos funcionam na prática até porque alguns deles são muito rápidos né então interessante você ver mais uma vez como que diferentes algoritmos se comportam para fazer exatamente a mesma tarefa Em que casos que um é melhor do que o outro por exemplo esse frio Nike pode ver que o celular está sendo é o último colocado em todos eles sempre o melhor quase sempre está terminando por último Olha só várias vezes já terminaram e selection é que ainda está terminando sua operação agora você olha por exemplo bubblesort olha só aquele já terminou enquanto que outras operações se ele ainda está terminando porém dependendo da quantidade de elementos Pode ser que os elétrons Ou seja a melhor alternativa para o seu algoritmo porque pode ser que esse algoritmo seja muito mais rápido de ser manipulado se a nossa lista de elementos for menor novamente uma possibilidade depende muito de cada caso então por isso que é interessante nesse saber que outras técnicas em relação ao tipo de código que você está manipulando porque isso também pode ter resultados diferentes eu já sou cliente sorte aqui ele realmente ele é rápido em alguns casos né não Experimente todos os poderes que o filme aqui Apesar do nome ser muito forte ou seja na modelação rápida vários outros e já terminaram antes dele olha só o que é terminando e trabalhar então às vezes os nomes Enganam também então são esses aspectos que as duas cerejas tratar com você né em relação à complexidade de algoritmos entendo que esse dê exemplos mais visuais são bem úteis aí na sua compreensão mais uma vez esses são exemplos bem tradicionais na própria dessa própria complexidade de algoritmos então feliz que entenda que é interessante também que você conheça e saiba como que isso pai de funcionário de um jeito bem visual beleza outro assunto bem interessante se chama concorrência para falar de concorrência gostaria de trazer alguns exemplos mais talvez históricos para você alguns anos atrás tivemos aí processadores processadores de computador mesmo em que ele só tinha um núcleo né só tinha 14 e várias aplicações elas foram naturalmente desenvolvidos para funcionar somente com um corte exemplo jogo vários jogos de computador até hoje infelizmente eles são utilizados para somente funcionarem bem com um quarto Então até caso você seja entusiasta definir verso de jogos principalmente jogos de computador será mencionado sobre marcas de processador sobre modelo de processador placa de vídeo pessoas que trabalham bastante no universo de madeira Science também possuem essa preocupação por que quando falamos de concorrência é basicamente assim Gostaríamos que aquela aplicação ela faz um maior uso possível de todos os recursos computacionais fazendo quando falamos de recursos computacionais Nesse contexto seria o número de processadores então o que que é interessante devemos aqui como falei temos até hoje vários jogos que eles funcionam muito bem com um corte então não adianta os telão um processador que ele é muito caro ele tem a 32 64 núcleos até mais do que isso sendo que para aquele jogo que você gosta muito ele vai utilizar somente um quarto então na gerencial se acaba comprando em um computador muito caro e dependendo como fazer da aplicação que você vai utilizar você sente o jogo travando não tem uma performance muito legal e a Justamente por isso é porque ele não quem desenvolveu o software por qualquer razão seja acabou não o otimizando para que funcione bem com vários vários processos utilizando vários processadores ao mesmo tempo dito isso que é interessante devemos aqui temos algumas diferenciações quando falamos de concorrência eu posso ter processos que eles podem utilizar múltiplos processos ou múltiplas threads você pode ver até para ter mente dentro do próprio conteúdo textual de que existe é quando falamos aqui de multiprocessamento né ou concorrência utilizando processos e threads a lógica de uma forma bem simplista É mesmo então eu consigo criar várias árvores Neo vários filhos de uma execução que você está fazendo de um software deve um algoritmo que você mesmo construiu para que uma forma paralela e até acredito que esse tema bem interessante para você não é concorrência praticamente igual a paralelismo no nosso contexto a quem eles aumento de software então quando estamos falando de concorrência acho que é interessante pensar assim Eu tenho um processo outro em determinada operação dentro de algoritmo que eu gostaria que eu posso dar de uma forma paralela entre diferentes processadores até porque o resultado de um não afeta o outro por exemplo vamos supor que os tem lá uma fila ou uma lista bem grande e estudantes novamente sem fazer alguns cálculos até mesmo funcionário de uma empresa nas tem uma lista muito grande entre funcionários de uma empresa e preciso calcular folha de pagamento por exemplo da folha de pagamento é interessante porque geralmente ela é calculada em período específico do mês e não dá para esperar muito tempo sem calcular quilo rápido e de uma massa muito grande ao mesmo tempo de Empregados não então pensando nesse contexto é dependendo do tamanho da organização os pais de ter dezenas de milhares ou centenas de milhares de pessoas que você precisa calcular como fazer essa folha de pagamento de um jeito rápido e eficiente agora para calcular isso de um jeito rápido e eficiente Imagine que temos uma lista ou no power Rei na época implementação do gênero no Python e não necessariamente o resultado de uma pessoa vai afetar o estado de outra ou seja vamos supor que tanto eu você e demais colegas estejam dentro de uma única lista né nós trabalhamos em uma mesma empresa e nesse caso hipotético nesse cenário o cálculo da sua folha de pagamento ela é sua seja ela só interessa a você o resultado desse cálculo não vai influenciar o cálculo da minha folha ou dos colegas Então nesse sentido há uma Independência aqui para fazermos scalco um outro cenário em que você às vezes não precisaria ter essa dependência entre um elemento em outro jornalista será mais ou menos o seguinte Imagine que você precisa calcular indicadores por exemplo indicadores financeiros para tentar entender qual seria um resultado de uma operação no mercado financeiro ou não é prevê o resultado aí com o uso de um algoritmo preditivo identificador de saber o que que você deve fazer dentro de uma determinada empresa né como decisão realmente de compra e venda algo bem aí nesse sentido de não falei de Finanças nesse caso os pode ver que o que acontece com o cálculo ele possui resultado no próximo cálculo então todos esses elementos de uma lista eles podem ser bem conectados ou ainda outro caso mais simples Até que do universo de academia né de estudos de estudos acadêmicos seria até um cálculo de nota dependendo do da metodologia utilizada dependendo do local net faz esses cálculos Às vezes a primeira nota ela pode ter em uma precedência da segunda nota ou uma é podem interferir na outra ou é necessário algum tipo de comparação dessas diferentes notas Então realmente foi um pouco difícil entendermos que esses cálculos seriam Independentes Então aí nesse caso de dependência né Talvez seja um pouco mais complexo de fazermos aí esse paralelismo é de trabalharmos com essa concorrência tá dito isso então essas operações e de processos Outlets a a grande diferença delas seria no que elas conseguem compartilhar na memória Então até um jeito de pensarmos assim um processo ele é completamente separado do outro seja ele possui seu próprio espaço de memória nele tem aí o seu próprio espaço pensando em do ponto de vista de recursos computacionais para trabalhar então esse processo como eu falei eles ficam lá dentro da caixinha deles né e você consegue fazer essas operações seja como eu falei delegar parte de cálculos e acende loop seja ou alguma outra operação que acaba demorando muito tempo para execução o que você realmente precisa deixar gelada para executar enquanto que por exemplo aí as as frases elas conseguem compartilhar entre si este espaço de memória um exemplo legal até com uso de processos e threads mais os processos são com alarmes não é o alarme realmente de que nós não humanos estamos acostumados mas tem um alarme de eventos então por exemplo os porteiro aqui uma máquina não é um computador a executando qualquer algoritmo e tá monitorando alguma coisa pode ser um monitoramento de sensores pode ser um monitoramento até de bomba de água né aplicações reais e por qualquer razão seja nós queremos levantar um alarme né ou mudar a cor da tela ou a gente quer ligar um outro sensor desligar alguma proteção quando algum evento acontece mas não dá para fazer as duas coisas ao mesmo tempo do ponto de vista de algoritmos na quando a gente fala algoritmo Imagine que ele sempre vai percorrer ou ele sempre vai estar em algum momento em alguma daquelas linhas que você já está acostumado quando 19 Soccer então não tem como fazer duas coisas ao mesmo tempo isso não é do ponto de vista realmente tem gestão do tempo conforme os processadores mais resistentes quando fala mais recentes coisa de 2030 anos para cá eles conseguem fazer várias operações em paralelo na verdade eles executam também trocas rápidas então ao mesmo tempo em que tem um algoritmo que ele está executando né tá pulando de uma linha para outra se eu esticar se o tempo tentar se ver operação interna nível de NS de microsegundos nós conseguimos perceber que também estaria alternando entre diferentes processos então a com suas é uma troca rápida que os próprios computadores né que os processadores executam aqui para executar para enfim delegacias diferentes operações então no caso que eu odeio quando falamos aqui dessa delegação de processos dessa criação de diferentes processos a nós conseguimos olhares diferentes operações nesta região e sensores sejam alarme sejam eventos sejam interruptor então existem essas diferentes maneiras de monitorarmos esses processos e da chique como fazer estamos observando tudo e caso alguma coisa acontecer que precisamos ser alertados ou chegar em algum ponto do algoritmo executar outra operação também esses processos podem ser úteis nesse sentido um outro caso também até de aplicação de processos e threads seriam as próprias Avast navegador inicialmente desses navegadores mais recentes se você abrir o gerenciador de tarefas seja e do Windows o Linux qualquer outro serviço é muito provável que você se depare que conforme a quantidade de Abas abertas que você possui essa misera vários várias vezes no seu navegador repetido anão é um blog mas sim é um exemplo prático aqui nesse processo não é dessas freddy's operando aí para você o que seria bem interessante para o seu conhecimento seria aqui com esse processamento a quando a gente fala de 5 no A5 eu gostaria de novamente trazer o alimento tempo para você na grande maioria das vezes não é interessante nós aguardamos operações que estamos esperando algum retorno enquanto o algoritmo ele está sendo executado explique principalmente em aplicações web é o quando a gente depende da resposta de algo que não está no nosso alcance seja um servidor seja uma outra aplicação algo que eu falei não está no nosso controle podemos ter um caso de processamento assíncrono os cinco então é mais camente em tempo real eu posso perguntar por exemplo o seu nome você pode me responder na mesma hora então até se existirem duas pessoas dialogando poderia se dizer que é um processo em que uma fala e a outra responde na hora uma pergunta também em outra rebate então aqui seria um exemplo bem simples né de processamento 5 por outro lado um procedimento a 5 né quando você não necessariamente espera uma resposta de uma outra pessoa naquele mesmo tempo então se o processamento ciclo seria um diálogo de duas pessoas cara cara ou por telefone um exemplo de procedimento assim que poderia ser um e-mail uma mensagem de um aplicativo de celular semana mensagem e você dependendo do seu grau de ansiedade Você não espera a resposta de uma pessoa imediatamente você sabe que aquela pessoa pode demorar um pouquinho para responder para você ou dependendo da pessoa pode demorar vários dias para responder então aqui é um exemplo de processamento assíncrono você manda alguma coisa e espera alguma resposta que algum dia virar então não faz sentido né você manda uma mensagem no celular e fica esperando e fica sentado várias e várias horas com a tela desbloqueada alguém responder senão vai fazer outra coisa né vai cortar grama vai limpar o chão vai preparar um alimento e quem vai fazer alguma coisa então esse é um exemplo de processamento assíncrono a mesma coisa é no universo de software não faz sentido pela um algoritmo que tá rodando precisando todos os processos um computador esperando a resposta no servidor alguma coisa travando tudo a todos os outros processos um computador né sejam celular ou qualquer outra coisa ele possui várias outras operações que precisam ser feitas ao mesmo tempo seja atualizar o relógio Atualizar previsão do tempo seja mostrar uma notificação seja fazer um download de alguma atualização então existem vários processos acontecer em paralelo então É bem interessante reconhecer se a operação que você está executando ela é de fato síncrona Ou assíncrona e isso pode fazer toda a diferença para você conseguir desenvolver algoritmos que são mais eficazes frases pega de novo um exemplo e dos processos e das frases existem casos que não vale a pena como fazer você esperar que a resposta de alguma coisa para criar um outro uma outra frase não dependendo do caso de outro processo para monitorar e ver como que as coisas estão acontecendo Se houver uma resposta quando houver uma resposta aí volta lá no seu processo principal e continua a trabalhar com seu algoritmo é e fazer as operações que você estava esperando Beleza então acredito que é esse Você de trazer para você nesse ponto de vista aí na de concorrência de paralelismo no universo de software também é legal hoje em cadernos em conjunto é escalabilidade quando falamos de escalabilidade é basicamente garantir que é aquele mesmo algoritmo funciona muito bem para você até mesmo para um conjunto de amigos que testam o seu algoritmo possa também funcionar Se tivermos um pico de acessos várias pessoas utilizando na casa de centenas milhares de pessoas utilizando também aquele mesmo algoritmo Então nesse sentido por favor me acompanhe aqui nos slides veja que a pergunta principal quando falamos aqui em escala habilidade seria essa primeira pergunta né continua a sua aplicação o seu algoritmo continua funcionando se houver um pico de acessos ou uso pode ter se deparado na ao longo da sua vida com vários casos em que um site é um serviço para de funcionar Se tiverem um pingo de acesso por exemplo site de ingressos até mesmo site de bancos na presencialmente aí em Águas próximas de pagamento até mesmo algumas redes sociais dependendo da época site de esportes também né e que dependendo aí do jogo do Sport a ingestão pode ter aí um grande a conjunto de pessoas acessando o mesmo tempo querendo né atualizações então aqui se é importante pensarmos nesse tipo aqui pergunta né aí da sua resposta dependendo da aplicação que você está trabalhando se você está desenvolvendo por exemplo uma calculadora em que ela somente rodar ia no seu computador Talvez essa pergunta que não seja aplicável mas esses outros serviços eu comentei assim Então veja que novamente que comentamos sobre o termo de paralisação a quando falamos aqui de paralisação né ou ainda nesse tópico de escalabilidade para tentar resolver aquela primeira pergunta Alguém poderia argumentar que para resolver isso seria tão somente uma questão de colocar mais servidores tem a preservar aquele mesmo trabalho ou em verso tem uma máquina mais pesada né ou seja tendo mais de uma área ou preça a dor para resolver aquele problema então até Penedo do cenário pode ser essas esses dois pontos sejam boas respostas para resolver essa questão mas não significa necessariamente que seria a solução mais elegante a solução mais inteligentes para todos os casos por que isso veja aqui se tão-somente fosse um caso de alocar mais memória para saber de uma mesma máquina se tivesse um outro pico de acesso com mais pessoas teria que colocar mais memória processador e e quando baixar Assis hípico você até poderia ter em um cenário em que você estaria pagando uma máquina que seriam muito cara para fazer um trabalho que seria mais simples que não precisaria daquilo em outras palavras você poderia estar desperdiçando o dinheiro do ponto de vista de Arquitetura em nuvem ou servidores tem que realmente estão trabalhando em nuvem é esse primeiro ponto ele também pode ser até mais pode fazer mais sentido que seria locação de mais computadores dores para o mesmo trabalho existe até uma irmã chamada load balancer ou fornecedor aí de carga isso é muito comum em arquitetura de nuvem em que você pode ter em um servidor que é mais simples e executando o trabalho na seja seja atuando como servidor entregando conteúdo para diferentes usuários para diferentes pessoas e pode chegar em momento que esse lado dela ser ele vai começar a perceber que existem alguns casos em tem um pico de uso o que é um pico está se aproximando né então o volume de uso de vários usuários começa aumentar muito rápido e isto sob um alerta mas para evitar que aquele site aquele serviço caia ele coloca ou seja ele cria mas um computador mais um servidor para ajudar nesse trabalho e quando o pico baixa né ele de novo desloca esses computadores e aí você acaba pagando somente pelo uso então pode ser uma alternativa interessante também agora pensando no ponto de vista de palito né Como que essa escala habilidade pode ser estudada como que ela pode ser pensada lembre-se tanto dos direitos quando se tem leitor se comentando em outras oportunidades então quando falamos aqui de Janaúba naturais ou exciters essas duas aplicações elas podem ser usados até para que a gente consiga uma quantidade relativamente baixa de memória dar conta de todos os operações não importa a quantidade de itens Então veja que o termo paralelismo escalabilidade otimização complexidade de código tudo isso começa a virar como se fosse um único tema uma coisa só quando a gente começa a falar de algoritmos que são utilizados por várias pessoas então por isso que pode dependendo do caso da sessão que tudo isso é como assinar um grande conjunto de temas porque esse fato dependendo da sua compreensão usecred né de processamento a 5 também endereçar esses algoritmos e tem uma boa performance por último também gosta de encher trazer um paradigma que ele é mais recente para o Nat mais recente ainda na casa dos anos pode ser coisa de 5 10 anos mas mesmo assim comparando com outras arquiteturas ele é relativamente recente que são aplicações service Ou seja que rodam sem servidor quando falamos aqui de arquitetura na nuvem existe uma outra forma de jogar a enchermos que esses algoritmos eles estão funcionando que hoje nós não criamos um servidor para hospedar o nosso código Nossa somente primos o código e nós ativos ele quando necessário Então isso é um exemplo de aplicações service nós não pagamos mais por um servidor pela hora de uso e sim a gente paga o algoritmo somente o tempo que utilizar exemplos aqui teríamos no caso de web scraping ela seja serviços ou algoritmos que possuem como tarefa ir num site coletar informações e salvar em servidor esse tipo de aplicação para ser executado uma vez por dia pode ser executado Às vezes uma duas três vezes por dia mas não precisa ficar ligado 24 horas por dia ainda que se faz uma consulta uma uma vez por hora ou ainda uma vez a cada 15 minutos novamente Não precisa ficar ligado 24 horas por dia porque algo que você vai utilizar quando necessário Então traz casos em que você não vai utilizar 24 horas por dia pode fazer mais sentido você criar em uma aplicação desse tipo e paga como falei somente pelo uso então no ponto de vista de custo benefício pode também valer muito a pena para você então também por isso que trazemos esse tópico aqui de escala habilidade para garantir que os seus algoritmos e não somente sejam elegantes do ponto de vista de desenvolvimento mas também que resolvam o problema mas não resolveu o problema quando tem uma pequena massa de pessoas funcionar bem independentemente da quantidade de pessoas que estão aí consumindo o seu algoritmo beleza aqui também é do seu interesse e são as implementações de linguagens de programação o que inclui os e Python pensamos um pouco sobre o pai tomar enquanto a linguagem de programação essa linguagem de programação C para criar algoritmos em paz então fora colocando um eu queria uma função afim criando um algoritmo em Python que não necessariamente dentro de um arquivo chamado uma exceção .by você pode criar um algoritmo em Python em uma folha de papel para criar um algoritmo em Python e um slide de uma apresentação os pode criar um algoritmo em Python que apresentam um papel de guardanapo isso não significa que esse algoritmo vai executar ele vai rodar sem nenhuma problema porque enfim ele não está dentro de um arquivo ponto P Y está em um guardanapo não tem como ser rodar aquele algoritmo mas mesmo assim é um algoritmo que você desenvolveu então qualquer diferença né do Python onde que a realmente entende-se que aquele algarismo pode ser executado como que que funciona nessa Fronteira é para isso que vem aqui o tópico do seu pai então por favor me acompanhe aqui nos lares quando falamos aqui do seu Python interessante trazermos o tópico de implementação de linguagem quase sempre as embalagens de programação nas possuem uma implementação que ela é referência ou seja alguém uma empresa organização pegou aquela linguagem de programação com todas as suas regras por exemplo Python né correria dentação regra de nomenclatura o que que é maiúsculo e k minúsculo que que é o DF que funções existem O que que é uma função né O que é uma repetição Então pega toda todo este manual de instruções que seria nada aquela linguagem de programação e implementa de uma forma que as pessoas passam a utilizar Então até se você quiser hoje você pode de alguma forma arma entender que está criando sua própria linguagem de programação que por exemplo seja somente com emojis não significa necessariamente que a sua ideia vai funcionar amanhã você tem que experimentar né que tem que colocar Aquilo em prática então foi o que no caso essas diferentes Organizações e empresas Fizeram no passado pega o pai Como por exemplo o pai de um possui uma implementação de referência que se você Python então se for no site do Python baixar ele instalar no seu computador na verdade você está adotando a implementação padrão do Python que se chama seu pai não significa que a centralização do Python é a única do mundo existem outras por exemplo pai pai tem Wilson Python que é o a linguagem de programação utilizada por trás enquanto que nos separe não seria linguagem C não era um pai tão cedo eu fechar e também tem um jeito né hoje apresentação aí por baixo acho que utiliza-se o Java a mesma coisa também se aplica com outras linguagens de programação então por exemplo C Sharp L possuem algumas implicações a mais conhecida dot net que é da Microsoft também tem amor não tem ha.no existem aí algumas outras implementações também não fechar a mesma coisa do diabo não é mais conhecida do arco mas também tem aí a Open jdk que é código aberto né código livre Então para mim questão de licenciamento diferentes pessoas para não escolher criar um algoritmo em Java utilizando a representação da arco Mas sendo Open jdk a mesma coisa né no passado era com seis Sharp Muitas pessoas não preferiam a utilizar dot.net acabavam utilizando humano então a vitamina mesma forma pode ser em Python né Você pode acabar não optando em utilizar os e Python e cinco utilizar outras imprimir tentações e o seu código na grande maioria das vezes deve funcionar sem problemas e por que que eu comento isso né Deve funcionar sem problemas na grande maioria das vezes esse que é um quadro comparativo tá É bem interessante do sinalizado por que aqui estamos analisando diferentes problemas tá então que seriam esses problemas pegando aqui o nosso Player o que que eu gostaria que você interpretar está cada uma dessas caixinhas cada um desses gráficos representam diferentes em um problema matemático diferente que foi analisada por diferentes implementações então basicamente o pessoal queria um código em Python novamente um algoritmo em Python o mesmo algoritmo e utilizou diferentes implementações para o mesmo algoritmo desenvolvido para ver como seria a diferença de performance Então veja por exemplo aqui em cima né Eu tenho esse Manoel brother que seria um problema matemático específico a mesa de DNA então como eu falei são diferentes problemas matemáticos que foram desenvolvidas para o ponto de vista de academia o pessoal chama isso como um problema de benchmark então a gente utiliza isso como comparação mesmo para testar e ver como que diferentes implementações se comportam com esses diferentes problemas matemáticos Então veja aqui que sempre no eixo Y nós temos a quantidade de tempo em segundos que demorou para executar esses diferentes problemas matemáticos naturalmente nós queremos sempre uma implantação rápida né então quanto mais próximo aqui do chão né 20 melhor e veja que no eixo X temos as quantidades e Travis lembra que falamos na sobre Ted sobre processos então Aqui nós temos essa diferenciação então nós queremos que conforme aumentamos a quantidade de tweets é espera-se que informe-se também esteja melhor e vejo que não é sempre isso que acontece então separação que a implementação padrão ela é mais demorado que as outras em média no geral Então veja que conforme vamos aumentando a quantidade de threads o tempo de execução aumenta muito então é por isso que alguns casos a gente vê aí pela internet pessoas falando que o Python é uma linguagem de programação lenta a performance do Python não é uma performance boa isso não é verdade na verdade a implementação referência do Python ela realmente pode ter uma performance abaixo do esperado para vários problemas matemáticos mas se não sentir que sempre vai ser o caso Veja por exemplo o pai aqui na cor vermelha ele pode ter uma performance muito melhor que você Python independentemente da quantidade de crédito ou ainda o Iron Python eu já estou em vários outros então por isso que é importante entendermos até que ponto essa afirmação pode ser verdadeira aí não apenas isso quando falamos aqui dessa Performance em Python ou dessas diferentes implementações A grande maioria das empresas ações elas são pensadas elas são testadas nos separe em apresentação referência então não necessariamente toda detecta que você utilizar ela vai ser compatível com um ar um pai um pai pai ou outras por outro lado Vargas se biblioteca se elas são feitas diretamente com funções em ser utilizado em outras linguagens de programação por baixo até pensando da otimização de um pai para exemplo segue esse caso Então se consegue fazer várias operações de uma forma bem rápida utilizando um pai do que utilizando aí até a próprias funções padrão na dessa implantação de referência do Python então eu entendo que esse gráfico aqui é bem interessante para você entender primeiro que não é o Python que é alento existem diferentes e 5 inventações tem apresentação referência do Python ela se pode ter aí Alguns algumas questões de performance dependendo da aplicação que você utiliza E além disso que essas mesmas implementações é a mesma coisa para outras linguagens de programação então caso você já tenha se deparado antes né Pega lá o caso do Java Será que só existiam hora como né se só existe o agora com o que que estreou Open jdk a mesma lógica aqui também se aplica pai então por isso que entendo que é interessante tetras essas comparações esses estudos que são mais o ponto de vista acadêmico mesmo mais do ponto de vista científico também para você entender um pouco a lógica Quando falamos a crianças diferentes implementações beleza lembra dos conceitos de programação orientada a objetos os objetos classes de fins então existem ainda algumas expansões para isso no caso seria os protocolos Interface para gente entender um pouco mais sobre isso por favor aqui me acompanha nos slides quando falamos aqui de protocolos interfaces eu gostaria primeiro da gente pensar nas costas né que serão basicamente aquelas receitas que os objetos deveriam ter então poderia ter a uma classe de cachorro e ter nas diferentes objetos que seriam instanciados A partir dessa classe cachorro dito isso nós temos aqui interfaces essas interfaces elas ainda são mais abstratas do que as classes então o que que é uma diferença entre uma interface uma classe na classe A gente informa quais métodos existiriam e precisamos implementar o código desses métodos você já falaram que esses métodos deverão fazer já nas interfaces Nós não precisamos fazer isso não precisamos somente informar qual que é o metro mas sem colocar nenhum código embaixo é como se fosse uma lista de um referencial desses métodos mas como falei sem informar necessariamente o que deveria ter dentro desses M Então existe uma implementação disso no Python e o nome disso é o módulo chamado protocolo Então até existem outras linguagens de programação que o vão chamar isso de interface ou de protocolo então é legal você saber que existem há dois termos da mesma coisa além disso a existem classes abstratas a diferença de uma classe abstrata para uma interface que que a gente consegue na sexta em um método e Se quisermos nós conseguimos também implementar aí um pouco dessa lógica então é uma camada de abstração a mais até pelo pelo próprio nome e no Python também existe uma implementação de gesso cujo nome é o módulo ABC o abc Na verdade ele é mais antigo que o protocolo Então até dependendo da versão do Python que você tem no seu computador pode ser que vai existir cima no módulo chamado ABC e não o protocolo tá até que eu também trago um exemplo uma comparação para você que isso seria uma forma da gente interpretar é que a interface e e uma classe abstrata né poderia ser entendido como um ser uma interface informal e o outro como ser uma interface realmente né como interface ou seja uma interface for mal então aqui é legal Strange economia para você entender que as duas até do ponto de vista conceitual podem ser bem similares mas que não é uma tem aí algumas capacidades a mais do que outras por exemplo classe abstrata como falei opcionalmente consegue aí a implementar esse a lógica desses métodos exemplos aqui também eu trago para você né como estamos aí pensando em uma linha de uma classe chamada cachorro Então vamos pensar primeiro de baixo para cima né Essa classe chamada cachorro o que que ela teria e como métodos tem o que que ela teria como ações Primeiro ela poderia fazer som como um cachorro né então um objeto instanciado de cachorro nas Esperamos que ele faça som de um cachorro né que ela também se movimente como um cachorro e que passei também como um cachorro Passei esse essa classe cachorro ela pode ser inspirada nela pode ser a criada em cima de uma classe abstrata chamada animal veja que essa classe abstrata chamada animal um animal qualquer animal seja ele pode fazer som e pode se movimentar mais um animal do tipo cobra ele vai se movimentar de um jeito diferente de um cachorro diferente um gato e assim por diante e também eu posso ter uma interface chamada animal de estimação interesse somente vai passear Então veja aqui que eu consigo combinar esses dois aqui para atender os nós os critérios E com isso temos a nossa classe é esse na inspirada ou utilizando essa classe abstrata e interface atingir os nossos objetivos do ponto de vista de implementação beleza E finalmente não há 300 seria um veículo então eu passei um veículo Qualquer veículo ele vai se movimentar vai carregar descarregar Isso natural para você eu posso ser também um automóvel que tem uma interface que é um tipo até aí te veículo aqui no caso ele vai ligar o motor ou desligar o motor e por último vejo que essa classe e Sedan ela é um tipo específico também não somente de veículo Mas também de automóvel então nós conseguimos ver herdar né Essas diferentes configurações esses M tanto de classe abstrata quanto da interface e implementar com sucesso dentro dessa classe beleza