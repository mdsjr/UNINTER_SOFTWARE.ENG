Olá Nesta aula a gente vai conversar um pouquinho mais sobre um tema que é um pouco complexo mas é muito importante para desenvolvermos algoritmos que realmente resolva os problemas das pessoas que acompanha enchimento laje por gentileza a ideia aqui imagina só quando Nós criamos algarismos geralmente nós queremos resolver problemas problemas que são na vida real seja por exemplo prevê comportamento seja até criar um site serve para alguma coisa a criação de um algoritmo e quando serve para alguma coisa se a criação de um algoritmo nosso basicamente precisamos isso em alguns casos transporte conceitos da vida real em código apresenta Internet Banking Internet Banking temos Correntistas na tem conta corrente tem clientes pelos gerentes e todos esses fatores esses conceitos precisam ser transpostos em código para nos ajudar nesse sentido existe um conceito não paradigma chamada programação orientada a objetos é um pouquinho lente daquilo que nós estamos acostumados Principalmente quando começamos aprender a desenvolver códigos mas saber o que se trata a programação orientada a objetos é muito importante para realmente garantirmos que estamos conseguindo algoritmos possam resolver problemas da vida real beleza

ir para falar de programação orientada a objetos muito importante é até legal né conversar mais um pouco sobre exemplos a vida real entendermos o que que nós desenvolvemos até o momento e tipo de hábitos nós temos no mundo da programação e saber o que que é necessário para realmente transforma esses algoritmos para programação orientada a objetos então Egito isso me acompanha nos slides por favor Imagine que até agora isso se você desenvolver algoritmos mais simples Até o momento foi basicamente utilizando uma programação estruturada nesse paradigma então ele é um pouco mais simples Imagina que uma analogia como sendo uma receita de bolo receita de bolo a possui começo meio e fim possui até as veias no começo mini coração do que é necessário para fazer aquela receita Então os ingredientes que você precisa para fazer aquela receita e depois você tem aí um modo de preparo até no final se chegar nesse bolo Então até utilizamos isso em vários cursos essa analogia da receita de bolo para começarmos a falar de programação mas especificamente programação estruturada Então até com essa analogia da receita de bolo nós trabalhamos com funções estruturas de seleção repetição entrada e saída de dados O que seriam esses exemplos aqui em até traçando Paralelos em Python com essa receita de bolo entrada e saída de dados aquele input né aquele print pegando todas as colunas a desculpa todos os variáveis e nós precisamos para um algoritmo seja por exemplo o nome o salário de alguém é o peso altura eles exemplos bem simples de algoritmos que nós fazemos Enquanto estamos aprendendo programação de uma forma geral é realmente a esse seriam exemplos de entrada e saída de dados pensando na loja Gerais que tem de bolo seriam todos os ingredientes que nós precisamos para começar a fazer a receita depois disso quando temos por exemplo tomadas de decisão nessa receita de bolo a se a temperatura estiver cima de x faz tal coisa se a o bolo né começou a passar o começou na uma certa aparência faça outra coisa tudo isso são exemplos de estruturas de seleção no wi-fi wi-fi wi-fi que nós também trabalhamos em programação a preciso repetir um passo várias vezes bata massa a tela ficar homogênea na que o exemplo de classe receita de bolo ou em programação é um fórum do Uai então essas estruturas que são de reflexão e também por último temos funções que são aqueles pequenos na conjunto de códigos que são independentes entre si e gente consegue a chamar nvc utilizar se necessário for exemplos de funções que já existem no Python é o próprio ABS

sentido então lembrando tudo que nós fizemos até agora provavelmente em Cachoeirinha e programação estruturada tem um começo meio e fim sempre roda que é algoritmo como falei com começo meio e fim executequery algoritmo Terminei o trabalho e é isso aí por outro lado isso não necessariamente endereça todos os casos da vida real por exemplo quando nós falamos de programação orientada a objetos tem casos que não necessariamente tem somente um começo um meio e um fim pega não é o caso do Internet Banking quando hoje você abrir um aplicativo internet banking não necessariamente você fará exatamente a mesma operação que estará amanhã depois de amanhã hoje às pode abrir o aplicativo pedir para exemplo a segunda via de um cartão amanhã se pode fazer uma transferência depois de amanhã pode fazer uma transferência e um pagamento então não acho que são ações que nós fazemos em diferentes casos diferentes oportunidades pega também um caso de um e-comerce um site que vende produtos hoje você pode fazer uma ação que adicionar produtos uma lista de favoritos tempo de amanhã se vai escolher produtos e adicionar ou remover no carrinho daqui 5 dias você pode comprar alguma coisa então são novamente ações que você faz ao longo do tempo não necessariamente sempre a mesma operação então imagino a o caso da receita de bolo receita de bolo na sempre começamos com água temos é um começo meio e fim é sempre aquele começo meio e fim esperado aqui não Então temos ações diferentes que fazemos Aí dependendo do dia representando esse paradigma nessa forma que temos hoje de fazer qualquer coisa né Qualquer ação não necessariamente que hoje você vai fazer enquanto pessoa mesmo é a mesma coisa que você fará amanhã então sempre são ações diferentes não é sempre que são coisas diferentes acabam acontecendo também a mesma coisa se aplica em programação de um para isso eu não saio paradigma de programação orientado a objetos e também ela nos Progressos segurança e confiança porque segurança porque confiança na Imagine que comprou G orientada a objetos Nós também conseguimos estabelecer papéis então de novo lá no exemplo de Internet Banking você pode ser um cliente que vai ter determinadas ações ou vai conseguir fazer algumas coisas que não necessariamente um gerente Daquele mesmo banco vai conseguir fazer ou também você não sabe mexer conseguir fazer todas as ações que um outro tipo de cliente vai conseguir fazer então com isso a gente consegue segregar né de diferentes tipos de acessos ações e até objetivos na resultados dessas ações com esse tipo de paradigma quem também naturalmente isso traz na segurança Você não quer a partir de certas informações que você fornece entender que outras pessoas também possam mexer na sua conta né ou também a garante quando você clica lá no botão né de um carrinho de compras em um site e direto para fazer ultrassom que mudar o seu endereço ou finalizar compra quando você clica no botão carrinho de compras que ir para o carrinho de compras quando se quer ir lá finalizar sua compra só que se só consegue finalizar sua compra se você escolher alguma coisa então novamente com esse paradigma a gente consegue possibilita alguns dicionários e se para de irmã não é o único ou seja aposto não necessariamente utilizar programação orientada a objetos para resolver isso não entenda que programação orientada a objetos ela vai resolver todos os problemas do mundo ou que todos os desenvolvedores com muito tempo de experiência utilizou-se paradigma é somente uma outra forma de endereçar nos resolvermos problemas no dia a dia beleza

então Existem algumas funções que são específicas desse mundo de programação orientada a objetos que eu gostaria que você entendesse eu acho que até olhando um pouco mais sobre essas noções e conceitos se vai começar associar com até outras tecnologias outras técnicas existem aí nesse mundo de tecnologia da informação e acompanha os likes por favor uma das coisas que você pode perceber enquanto começar você vai trabalhar com programação orientada a objetos é uma similaridade comprar exemplo SQL ou seja bancos de dados no Excel a estruturados você vai perceber por exemplo banco de dados que trabalha aí conhece Kelly eu passei tabelas dentro dessas tabelas eu vou ter colunas dentro dessas colunas eu posso guardar informações não necessariamente uma linha desse banco de dados vai ter as mesmas informações da outra né eu posso identificar de uma forma única cada uma dessas informações na base de dados no banco de dados e também a mesma lógica posso acabar ficando em programação orientada a objetos ou seja eu posso também conectar um banco de dados que instalar em SQL E amarrar ele é um código Python o papel de linguagem de programação C Sharp C + + Java são exemplos mais clássicos né e trabalham com programação orientada a objetos e aí com isso eu posso representar é aqueles objetos elas informações que estão na baixa idade é aquelas linhas eu posso colocar isso dentro de uma linguagem de programação isso porque todas elas acabam aí respeitando alguns conceitos do ML é uma linguagem unificada de modelagem Como o próprio nome já diz e isso aí nos ajudam nessa representação de objetos de atores em 1 na vida real ou seja nas empresas da mesma forma aqui em SQL pensando em um banco de dados de um banco na internet banking pode ser uma tabela lá só lista os gerentes você é uma tabela que vai estar os Correntistas eu posso ter uma tabela de realizar as transações eu posso pegar essas diferentes tabelas E convertê-las aí em objetos da em classes dentro de um paradigma de programação orientada a objetos e sua ajuda te responder aquela pergunta sim tá eu estou criando banco de dados porque eu tô criando uma tabela G gerentes porque eu tô querendo uma tabela decorrentes de transações para quê que eu vou utilizar isso como que isso se amarra em programação de Fato né seja um site um aplicativo então é esse paradigma de programação orientada a objetos ajuda a endereçar essa ponte na responder essa ponte não somente se existe também a uma área que se chama arquitetura corporativa também ajuda a entender o nível um pouco maior como que diferentes sistemas como que diferentes processos de negócio acabam se amarrando então também esse paradigma auxiliar nesse sentido veja que eu falei muitas vezes a palavra programação terminar programação orientada a objetos mas nunca me aprofundei no objeto então que seriam esses objetos imaginei que objeto ele é uma coisa alguma alguma coisa da vida real é que vou deixar o termo coisa né realmente bem bem aberta por que um objeto pode ser o óculos que eu estou utilizando É pode ser uma bancada pode ser uma mesa imagina que objeto é um objeto vamos supor que você tenha exatamente o mesmo óculos que eu estou utilizando agora na verdade estamos com óculos no mesmo modelo esse óculos que eu estou usando agora não é o mesmo óculos que você está usando agora podem ser do mesmo fabricante mesmo modelo fabricado em conjunto mas esse objeto aqui ele é específico ele é único ele é próprio da mesma forma que o seu óculos se eu tenho um copo de plástico e você é um copo de plástico que Na aparência são exatamente a mesma coisa que nascem o meu copo e outra é o seu copo não são objetos diferentes em programação para manter exatamente essa mesma forma de pensar tá então são coisas da vida real Como eu falei esses dois objetos sejam óculos o copo a uma lâmpada não são a mesma coisa então ela se não ocupam o mesmo lugar ao mesmo tempo se você pegasse o seu óculos O seu cofre e colocasse junto com meu ainda se eles não compraram um mesmo lugar ou seja são de fato objeto sair Independência esses objetos vejo que eles possuem estados então óculos ele pode ter estado sujo Limpo aberto fechado um copo ele pode ter o estado às vezes Limpo sujo cheio Neo com Charles Darwin Qual que é o líquido que tem dentro desse copo então o qual que é a cor desse copo veja que cada objeto ele tem uma característica se possível parar um pouco para pensar em objetos tem mais próximo de você pode ser um teclado mouse uma lâmpada uma porta qualquer coisa quais estados quais o melhor Quais características

quando falou características são coisas que eu definir Então imagina a porta qual característica que deve ter aquela porta aquela porta pode ter um tamanho ela pode ter um material né que foi utilizado na construção dela ela pode ter uma cor imagine de novo né o óculos a qual que é o fabricante daquele óculos só que é o tamanho daquele óculos a cor Então são características que define ou coloco né Qual que é o tipo de plástico que é utilizado a qual que é o tamanho daquele copo é qual que é a cor daquele copo então são novamente características que o define ou imagine pessoas né O que que definiria o que que distinguiria uma da outra se Estamos por exemplo em um lugar comendo alguma coisa restaurante às vezes só o nome é uma característica que vai na diferencial no outro às vezes para Receita Federal vai ser muito mais do que isso vai ser no CPF data de nascimento nome dos pais então Depende muito do contexto é Quais características se nós vamos ter desses objetos e também dos Estados quando eu falo estado é algo que pode mudar Aí dependendo de uma ação Então tem um óculos óculos eu posso tirar ou colocar no rosto eu posso abrir e fechar ele uma porta também não posso abrir e fechar uma porta um copo né eu posso pegar ou colocar em cima de um local então também imagine esses estados como como aquele objeto está nesse momento e o que que pode ser feito para mudar ele então é importante dessas diferenças aqui algumas comparações que podemos ser que então tanto das características e afins dos Estados eu posso atrelar ele de certa forma com os atributos que podemos comentar no mundo de inteligência artificial na linha chilena ou também essas variáveis e também esses comportamentos alegações ou funções né E também a gente pode falar partir de agora em métodos em linguagens de programação que é representar o objeto copo eu quero beber ele tem uma ação chamada beber posso transformar essa ação em uma função em linguagem de programação quando nós começamos a do Mundo desse paradigma de programação orientada a objetos a gente deixa de ser ferimento como funções e as funções essas ações que ocorrem em cima de objetos acabamos chamados de métodos e tá importante para saber essa mudança de nome então a invés de funções a gente começa a ser isso muito mais como métodos dentro desse paradigma as classes Imagine que as classes elas são aí manual de instrução no seu grupo entrou um molde que nós poderíamos fazer para fabricar objetos de novo exemplo dos óculos o óculos a classe que apresenta o óculos seria um manual de instruções de uma fábrica como que nós construímos sair 10 óculos desse mesmo modelo a multa de um jeito faz de outro tem que ter no mínimo é uma cor tem que ter um tamanho Então são são definições que nós utilizamos para criar objetos outro exemplo que que é o dono imagina que o objeto é o bolo a classe a receita de bolo então para ter bolo Mas precisamos ter a receita de bolo para ter um objeto preciso de uma classe que defina aquele objeto não é legal essa essa comparação a imagem outro caso também é uma classe seria a planta de uma casa e já o objeto seria a casa esse Então veja de novo a classe não seja exatamente a planta não sei não que seja necessariamente a casa já construída mas sim o que vai garantir que nós possamos construir 5 10 20 casos exatamente aquela forma a física né que se pode entrar você não pode espera-se que não né que você não coma a receita de bolo mas assim que você coma o bolo produzido não espera-se que você entre que você mora dentro de uma planta de casa mas sim que você mora na casa construída tá então é importante dessa diferenciação e outra forma que nós nos referimos aqui é que toda vez que nós criamos um objeto a partir de uma classe nome disso é instanciar então eu quero criar um objeto a partir de uma classe instanciamos uma classe e aí se Nós criamos um objeto exemplos que também trago aqui imagine uma classe chamada cachorro que tipo de método é atributo nós podemos ser que é um método que tipo de ações o cachorro pode fazer todo o cachorro ele pode latir ele pode comer para ir dormir pode mexer na vários outros métodos várias outras ações poderiam ocorrer aqui e também nós podemos ter alguns atributos eu posso ter dentro de uma casa de cachorro Esperamos que todo cachorro ele tem uma cor e aparecer um nome ele para ter o brinquedo Favorito Eu também pode imaginar vários sexo e outras características que possam ajudar definir todos os cachorros que existem dependendo desse contexto então nós temos de novo a diferenciação entre métodos e atributos Isso define todos os cachorros aqui quando nós instanciamos o cachorro eu posso ter objetos tem o que que seria o objeto com H é um cachorro chamado o que é uma cachorra é totalmente diferente de outro cachorro chamado Pipoca é diferente de outro cachorro chamado Dexter Eu tenho três cachorros diferentes poderia estar correndo aqui e aí eu posso ter na realmente esses objetos instanciados eu posso financiar 1023 cachorros e cada um deles terão essas esses atributos não é esses métodos que nós vimos aqui seria cor nome brinquedo Favorito e assim por diante Outro ponto que também gostaria de comentar né que são as heranças quando falo herança herança de uma casa Face imagina se eu posso ter uma classe que ela é bem genérica Eu passei algumas especialidades dela então como você deve imaginar eu posso ter subtipos na de cachorros então posso ter às vezes um cachorro que pode ser de estimação Mas nem todo mundo entende um cachorro de estimação da mesma forma você é um cachorro que ele é utilizado para exposição outro que é utilizado como um cão de guarda outra que é utilizado para corrida para eventos e assim por diante então como eu tenho eu posso ter a diferente entre aspas subtipos nas aplicações dessa classe ou classe especializadas então o nome disso seriam herança essas heranças elas eram os métodos e atributos Mas eu também posso incluir novos métodos novos atributos que são específicos é aqueles exemplos então outro caso né Imagine que eu tenho lá uma uma classe chamada carro então se como se deve imaginar essa classe carro ela pode ter em suas seus métodos ela pode ter aí seus atributos já definidos aí dentro dessa dessa classe porém não necessariamente os mesmos métodos atributos do carro com certificados para todos os carros existentes no mundo então eu passei aí uma herança de carro chamado caminhonete caminhonete eu posso ser às vezes uma novo método que é só da caminhonete que seria por exemplo colocar uma carga é uma carga maior que é um carro comum seria comum não seria da esperado Pode ser às vezes num furgão não é m ou possibilidades atributos que são específicas do furgão e não necessariamente de qualquer carro a mesma forma da minivan Então veja que cada um desses objetivos de carros eles podem ter suas particularidades nós conseguimos ser essa mobilidade que nesse sentido caminhonete furgão mini Gun tradução carros né eles eram de carro mas ainda se eles podem estender isso eles podem ter esses atributos a mais outro exemplo aqui na próxima bicicleta toda a bicicleta ela tem nessas atributos seus netos eu também posso ser tipos especializados de bicicletas BMX né que é uma bicicleta específica para ser bicicleta de carga bicicleta de pista de velódromo sefins então cada uma dessas bicicletas elas vão atender nichos diferentes necessidades diferentes e naturalmente aí eu vou ter netos que são específicos a eles uma bicicleta de carga por exemplo espera-se que ela deve carga Mas é uma bicicleta de pista então uma bicicleta eu posso pedalar qualquer uma das três bicicletas mais carregar produtos que é preciso transportar talvez tá na bicicleta de carga tem um beijo que eu tenho aqui essas possibilidades também outros cenários é residência eu passei subtipos de residências posso ir aí na residência do tipo sobrado outra que é totalmente diferente de uma casa de praia que é totalmente diferente de um apartamento no caso da residência eu posso selar um método específico do Sobrado que seria aparar grama se tivesse um gramado para um apartamento que não é no térreo não faria muito sentido aparar grama não faria sentido ter esse mesmo mas eu também passei para qualquer tipo de residência e método chamado entrar na abrir a porta e entrar na sua residência Então veja novamente eu tenho coisas que são em comum para todos esses objetivos de residência mas eu também posso criar alguns exemplos em específico veja aqui sempre tô colocando três subtipos específicas mas você não é restrita isso os pais de teclado que vão ter 10 heranças uma duas dessas heranças E aí depende de cada cenário também nós podemos nem todo mundo seria um único tipo de cliente eu posso ter tipos diferentes de clientes Internet Banking eu passei um cliente Ele Me Ama com outra mais simples esse cliente ele vai ter algumas ações que ele pode fazer que um cliente O que é Premium e vai ter muito mais coisa ele pode ter na imensa várias ações adicionais e também esses diferentes tipos de clientes eles podem ter dados de dados que são diferenciados atributos que são específicos a eles que não são de uma conta Empresarial e vice-versa exemplo mais simples que nós podemos pensar que é o o próprio identificador então uma conta Empresarial só ela vai ter um atributo é chamado CNPJ a conta simples o prêmio que seria uma pessoa física não contei isso eles vão ter como atributo ou CPF então aqui eu botei uma particularidade de cada um desses tipos Então é só para você entender alguns cenários que temos disponíveis aqui também né com exemplos práticos de métodos atributos lembra lá do cachorro não tenho método latir comer dormir se eu tenho uma classe chamada cão farejador um cão farejador e ainda sim é um cachorro mas esse cachorro ele vai ter métodos adicionais um cão farejador ele também vai late cão farejador ele também vai comer ele também vai dormir mas Além disso ele pode fazer jar e ele pode sentar aí alguma coisa ele senta então também né Nós podemos ter atributos adicionais que são específicas somente do cão farejador o cão farejador ele também tem cor com pelejador ele também tem nome ele também tem um brinquedo Favorito que um cão farejador antes de mais nada é um cachorro mas esse cão farejador ele tem coisas a mais tem atributos a mais que só dele teremos essas informações por exemplo tempo de treinamento é um cão farejador de preciso ser treinado para mim sempre a sua função e qual era o porto ele pode tá trabalhando nessa um cão farejador que a tua aí para detectar objetos legais e também a raça então às vezes um cão farejador nós precisamos saber a raça dele para um cachorro normal né em geral as vezes essa informação é necessária então aqui é um exemplo que você deixa trazer para você para entender qual que é essa diferença entre classe você ver como que isso se aplica beleza por último gostaria de falar contigo sobre interfaces veja aqui as classes elas podem utilizar suas interfaces as interfaces elas são como se fosse assim um manual um pouco mais simples e que uma classe que ela deve ter Então até pensando lá na classe cachorro quando a gente cria uma classe chamada cachorro se tem que criar o código falando que se espera quando alguém chama o método latir que que o cachorro deve fazer quando Nós criamos uma interface a gente somente fala assim olha se algum dia alguém quiser criar uma uma classe de um animal qualquer animal que seja olha todo animal tem que dormir então você cria uma interface chamada animal lance olha todo todo e qualquer classe que vem a utilizar-se interface chamada animal Ela tem que ter pelo menos esse método aqui né seja dormir seja comer alguma coisa do gênero mas como vai ser essa forma de comer e dormir vai depender de animal para animal pode ser uma classe chamada cachorro ela vai utilizar sem interface s no cachorro ele vai comer do jeito dele que é diferente da forma que um humano pode comer diferente da forma de uma tartaruga pode comer e assim por diante então nós que essas interfaces somente fala Olha tem que ter assinatura aqui mas não o código que eu utilizo né Essa que possa utilizar essa essa classe interface então por isso que deixou bem claro esse ponto que as interfaces não implementam m a gente não coloca o código para isso beleza agora como seria um assistente mentha sões de classe em Python é porque até o momento nosso somente vimos exemplos mais mais teórico né alguns exemplos na vida real mas até agora nada de Paiva tem como que isso seria na prática e acompanha aqui no slides por favor primeira coisa da mesma forma que quando criamos uma função a gente senta que cria nós utilizamos Chile Death naquela palavra-chave Death depois o nome da função e aí os parâmetros que fazem parte dela em uma classe É bem parecido então ao invés de nós utilizarmos DF para definir uma função utilizando o classe para definir uma classe tem um cílio cresce o nome da classe que nós precisaremos né Que Nós criamos e dentro dessa classe temos os atributos os métodos e uma palavra chave que é muito legal de você conhecer essa selfie selfie basicamente garante que nós conseguimos referir na criar atributos ou métodos que modifiquem atributos na arte mostre quem é o estado realmente o que acontece dentro de um objeto né dentro de uma classe Então esse selfie nos ajudam muito nesse sentido na prática imagina então que nós estamos criando uma classe chamada bolo e nesse desafio não é o melhor nessa criação não somente temos um M então m é basicamente assim estamos querendo um bolo que a gente quer definir o peso daquele bolo só isso então novamente é um bolo de um objeto bolo que nasceram no Ceará queremos criar vários bolos e para cada um desse bolo para cada um desses bolos nós queremos definir o peso só isso olhando aqui no código q que nós temos veja que primeiro temos a definição da classe da Lacraia espaço bolo até veja que cresce né ele tem azulzinho porque realmente é uma palavra protegida do pai tá uma palavra utilizada pelo próprio pai tá on igual Davi e também tem Azul então primeira linha o Class bolo lá então estou definindo uma classe chamada bolo de noiva Imagine que a sua definição de classe e começou a ser uma receita de bolo e não bolei esse então estamos criando a nossa receita depois definimos os atributos que fazem parte daquele bolo no caso peso aqui por padrão está zero né então todo bolo por padrão nesse exemplo específico ele começa com zero e aí Nós criamos um método para ele esse único método e Claros faz criadores 320 m do cemitério foi para uma classe A que nós temos o método chamado atribuir peso dentro desse método chamado atribuir peso desde que temos dois parâmetros o primeiro ao self.exe selfie que eu comentei antes com esse selfie nós basicamente o mesmo sem entender assim quando criarmos um objeto toda vez que nós chamamos esse atribuir peso estaremos atribuindo peso daquele objeto específico se nós não colocássemos de se atribuir peso o Patolino ele entender que nós estamos tentando atribuir o peso de um objeto instanciado de um bolo e sim que estamos chamando uma função qualquer que vai ter uma entrada e vai ter uma saída e não que novamente modificar a aquele objeto específico e o segundo parâmetro é o peso atribuir informamos Qual que é o peso que precisamos atribuir E aí sim ele muda para o peso específico veja aqui nessa quarta na quinta linha temos o selfie ponto peso que significa esse selfie ponto peso o selfie ponto ele está falando sim nós queremos alterar o peso daquele objeto específico então se eu não colocar esse selfie ponto eu não conseguiria na prática mudar o peso de um bolo em específico é nós não conseguiremos realmente alterar né aquele peso e saber o que que não quer dizer então nós nunca conseguimos mudar aquele valor daquele atributo desde aqui no final nós temos aí a criação de um bolo então estamos criando um objeto é chamado o bolo aniversário e nós estamos com aquele bolo abre e fecha parentes cri criando um novo bola nesse sentido é bem na salinha que nós estamos fazendo aquele instanciamento naquela instance estamos criando uma Instância de um bolo é bem na salinha que entre aspas a mágica acontece então criamos um bolo um objeto né de bolo aqui o bolo aniversário e depois iria sugerir se possível pega esse código implemento na no seu próprio computador e veja o que que vai acontecer se nós fizermos esse print bolo aniversário ponto peso nós teremos como resultado zero porque geralmente nós não mudamos o peso até agora só queremos um bolo e o bolo por padrão quando você viu lá no começo na segunda linha propaganda e tem o peso zero então por isso que ele sai dessa forma agora se depois fizemos o bolo aniversário ponto atribuir peso 2 bolo aniversário específico se eu tivesse criado o outro 5 bolos diferentes bolo aniversário bolo festa no fim de semana né bolo qualquer outra coisa se eu fizesse o bolo aniversário quando atribuído peso 2 eu somente a tribo de Mc peso ao bolo de aniversário todos os outros bolos não seriam afetados Então não é importante entender esse conceito e se fizermos esse último print veja que se print bolo aniversário ponto peso é igual ao print anterior então os dois nação preenche o bolo aniversário ponto peso porém ao fazer esse S print ou será que aí sim teremos o peso atribuído de 2 ou seja nós conseguimos mudar o valor do Peso na que por meio desse método o outro negócio bem legal de você saber que nós conseguimos inicializar uma classe com esse Def init veja que esse nicho ele tem dois underline SO2 Andreas códigos no começo e dois andares depois do início isso porque esse nit padrão no pai o pai então ele tem essa isso específico outras linguagens de programação inicializam as classes de uma forma diferente mas a lógica é a mesma que serei inicializar uma classe se nós olharmos de novo nesse exemplo aqui vem aqui o peso ele sempre por padrão tá zero e se nós quiséssemos já criar um bolo um preso padrão a gente também consegue fazer isso como com início então é para isso que serve esse início estamos aqui modificando o código e agora sim colocando início vejo que temos agora né aí se define e temos esse peso Inicial O que que eu gostaria que você olhasse tá esse definity então na terceira e quarta linha ou na quarta e quinta linha se considerarmos uma linha em branco verde que tem lá no Def init o selfie se mantém E agora temos um parâmetro chamado peso Inicial e até temos um peso Inicial = 0 que que significa esse peso Inicial igual a zero é igual a zero ele quer dizer que nós estamos atribuindo que podemos atribuir um valor Se quiser tem um bolo abre parentes 2 fecha parentes 2 ele já iria criar por padrão o peso Inicial não é igual a 2 mas se não informar Simus nada o peso Inicial por padrão ser esse 0 então virão ao opcional né a gente pode me informar esse peso Inicial Se quisermos se não quisermos por padrão e 60 e aí com isso a gente consegue rodar todo o código depois o que que eu sugeriria para você pega esse código tanto executado seu computador né deixa como ele se comporta e vai mudando esse peso Inicial O que que acontece se aquele bolo aniversário igual bolo ali fecha parentes se naquele abre e fecha parentes você me informasse 5 que queria conhecer com código ou se você pegasse o peso Inicial = 0 nessa terceira quarta linha odacy peso Inicial igual a 5 ou remover sol igual a zero o que que iria acontecer com código então realmente é como sugestão mudando a esses diferentes valores é muito provável que só entender um pouco mais na prática Como de fato funcionam aí essa atribuição né padrão a uma classe como que nós conseguimos instanciar ela e também costomizar alguns dos seus atributos iniciais beleza um outro toque também é bem interessante de conhecermos um pouco mais sobre polimorfismo na palavra um pouco mais complexa mas somente o conceito dela é bem simples para isso me acompanha nos slides por favor o polimorfismo é basicamente assim nós podemos ser um método Ou seja eu não falo um vírgula imagina se um nome padrão geométrico lá no exemplo daquelas cachorro não para de latir ou ainda não exemplo do bolo poderia ser assar ou próprio atribuir peso eu posso ter então um método com esse nome né que eu dei alguns exemplos implementado algumas vezes diferentes tem um passeio na verdade três quatro funções com o mesmo nome eu posso ter cinco funções diferentes chamadas exatamente assar bolo eu posso ter por exemplo 10 m diferentes da que é um exagero é chamado o cachorro latir então eu posso ter realmente diferentes implementações e seja repetições de um único nome de método mais dentro de cada uma dessas implementações melhor dentro de cada uma dessas funções e passei um código diferente então a premissa que básica do polimorfismo nesse cenário é basicamente a ciência pode ser como fazer 35 implementações diferentes de assar bolo mas o que vai diferenciar cada uma dessas funções diferentes cada um desses métodos diferentes serão os parâmetros então por exemplo eu posso ir lá um assar bolo que vai ter a temperatura e vai ter o tempo e a temperatura ambiente porque às vezes tá mudando a temperatura ambiente Ou posso também tem uma ação diferente para assar ou eu posso ter por exemplo E se eu tivesse disponível chip da Travessa que eu estou utilizando ou não é a pressão atmosférica que pode alterar um pouco ou ainda não é o tipo do forno que estou utilizando Então dependendo desses parâmetros se nós informamos nós também podemos ser implementações diferentes formas por exemplo Nessas horas sai um bolo quanto mais informações você possui em suas mãos pode ter as suas diferentes a posso assar um bolo Tá mas qual que é o tipo do bolo Qual que é o tamanho é quanto tempo que eu tenho Qual que é o forno que tem disponível tem muito gasto nem vou usar um forno a gás e elétrico Então eu tenho que ações diferentes e compare meu filho nós conseguimos implementar isso né considerando como fazer esses parâmetros de entrada diferentes também com esses parâmetros de entrada diferença para ter resultados diferentes ou soltar um pouquinho lá no exemplo do cachorro às vezes um cachorro de uma forma genérica tem o método latir M Launcher de um cachorro sem uma implementação eu vou ter uma determinada determinado resultado agora o cão farejador latir dele Pode ser que seja Beta mente diferente Ou ainda né imagina o Internet Banking pedir atendimento de um cliente e se pedir atendimento de um cliente comum pode ser completamente diferente do atendimento de um cliente por e-mail de um cliente Empresarial Então veja aqui estou falando a mesma coisa que pedir atendimento mas a forma que o atendimento ocorrerá ou a forma de atendimento será conduzido Depende muito do cliente então a lógica que é mesmo veja que estou falando de novo em uma ação que na teoria Seria a mesma mas a forma que acontece muda muito dependendo da classe ou dos parentes que nós temos aí disponíveis exemplo aqui naquele domingo cereja trazer imagine de novo veículo se eu falar para você estaciona o veículo na sua cabeça às vezes você vai ter em sua mente ou o carro que você postou disponível ou não é o carro de um vizinho vai ter assim o exemplo mais comum que você tem aí no seu no seu Imaginário Às vezes o que eu imagino para estacionar seja algo também mais próximo da minha realidade mas olhando aqui esses exemplos de slide vejo aqui que são casos que na prática mudam a forma que a gente vai estacionar um carro ou local que a gente consegue estacionar o carro é muito diferente no local tipo consegui estacionar uma moto ou até a forma né que nós vamos estacionar uma moto é bem diferente de um caminhão ou de uma bicicleta e assim por diante até porque uma bicicleta dependendo do caso nós podemos estacionar dentro de uma casa ou na terra colocar em um apartamento já é um caminhão isso não seria muito fácil ou até mesmo seria possível na prática Então veja aqui de novo estamos falando sempre da mesma são sempre do mesmo método estacionar agora a forma que nós vamos estacionar tanto lá da classe veículo ou estacionar o veículo pode ser uma forma muito genérica conforme nós vamos aqui olhando as diferentes implementações lógica completamente diferente então é isso que eu gostaria de deixar claro para você enquanto nós estamos falando de polimorfismo nesse conceito de programação orientada a objetos e agora eu gostaria de falar contigo sobre outras vezes temos que ele se conversam e acredito que também passa um ser bem outra no seu desenvolvimento de bons algoritmo utilizando o paradigma de programação orientado a objetos seria aqui no caso os códigos e os de corais e acompanhe por favor nos lares quando nós falamos aqui em loja de corretor importante primeiro falarmos sobre encapsulamento Então imagina né que quando estamos falando de encapsulamento eu posso trabalhar em Python e claro com outras linguagens de programação com funções dentro de funções então eu posso não pode parecer um pouco confuso Caso seja não tem implementado ao desse tipo mas eu posso ser realmente funções que dentro dela eu consigo como eu falei de uma forma encapsulada ter outras funções então eu posso ter na até conjuntos de código que eles são realmente encadeados isso nos dá duas vantagens primeiro redução de casos de variáveis globais quando fala uma variável Global às vezes para se conseguir transportar na variáveis ou informações de uma função para outra você acaba tendo que utilizar uma variável Global algo que assim outros outras funções outros objetos outras classes podem atrair contato e isso para não ser muito legal do ponto de vista de segurança é do ponto de vista de otimização no seu código então por isso que não é muito legal nós utilizarmos as variáveis globais A não ser que tenhamos um bom motivo para isso e finalmente temos aí eu caso de encapsulamento né começo comentei isolamento Da Lógica Ou seja quando nós estamos falando aqui do paradigma de programação orientado a objetos é importante ter nosso código bem é compartimentalizado ou seja bem ser ligado né bem dirigido bem organizado em diferentes blocos até pensando nessa organização da seriação no Gene que toda que acontece dentro de uma caixa toda lógica que se aplica dentro daquela classe como realmente fosse uma caixinha é específico é aquela classe e aos objetos que são influenciados por ela a mesma coisa também né em outros em outras funções outras implementações que possamos fazer aí nesse sentido então como é importante termos desse isolamento Da Lógica pensando até em manutenção uso no dia a dia importante termos isso de uma forma bem independente para garantir energia nessas implementações uma não acaba afetando a outra então às vezes você acaba tendo um código muito complexo isso não é muito discutido dependendo do tópico de programação orientada a objetos que algoritmos construídos nesse paradigma acabam tendo aí um grande conjunto de código então você acaba tendo é o chão de uma rede né realmente uma grande quantidade de linhas a mais e você não criaria se utilizasse outros paradigmas isso sentença os prós e os contras um dos motivos pelos quais criamos muitas linhas de código a mais realmente para garantir esse isolamento nessa Independência entre diferentes classes e objetos então isso naturalmente pode nos ajudar por lá do trabalho né que temos um volume juninas de código muito maior prejuízo entrar mas também ajuda porque se precisarmos alterar alguma coisa diminuir um pouco o risco de quebrar mas na outra sessões aí do código que nem acabavam nem chegamos aí prestado atenção ou conhecendo no dia a dia Então nesse sentido é por isso que falando de encapsulamento para falarmos de Cláudio Lins essas coisas aí são funções Então primeiramente cor igual função elas são aquelas que ficam dentro de outras funções e usam aquelas variáveis atribuídos a elas Então nada melhor do que mostrar um exemplo veja aqui eu tenho uma função dentro de outra função eu preciso a partir de uma área da base eu quero calcular é o volume que seria especificamente de uma pirâmide veja que eu tenho um Death silence calcular volume pirâmide é que está aí em volta por esse um retângulo que tem aí uns cantos arredondados mas nesse caso aí que foi Saiu uma linha laranja e essa função interna ela está dentro de uma outra função chamada calcular volume e área base Então essa função interna essa parte que está realçada nesse retângulo que não é bem um retângulo essa função interna é um exemplo de como é isso eu vejo aqui altura né que está em cinza quando nós utilizamos calcular volume pirâmide nós passamos a altura para ela e aí sim ela consegue fazer o seu dever do cálculo tá então é isso é que nós entendemos como um exemplo de implementação de Cláudio até se possível também utilizar esse código entendo né o Como que é o comportamento dessa utilização de Cláudio E como que você implementaria sem utilizar isso né Como que você resolver esse mesmo problema sem utilizar Cláudio e tipo de dificuldade hosteria né Que tipos de variáveis você teria que criar e não estariam dentro de uma função seria uma variável global e prós e contras histeria aí é uma espécie código Não é isso você deseja trazer para você nesse sentido com o uso de Cláudio até também expandido nesse caso veja aqui é usado em amarelo temos a constante essa constante ela é reaproveitada veja que no10 calcular volume pirâmide só temos um parâmetro que se chama altura e Justamente esse né que estava realçado em cinza não temos um seguro do parâmetro chamado constante Ele não tá aí mas mesmo assim nós utilizamos essa variável ou constante Pode parecer paradoxal não é uma variável chamada constante mas ela acaba sendo utilizada dentro dessa função calcular volume pirâmide e ela foi definida pela função entre aspas pai né então por isso que temos aí essa implementação então deixa aqui também utilizamos um exemplo né calcular volume área base 15 o que seria o 15 o 15 é justamente essa área da base Então essa área da base era transmitida para calcular volume pirâmide E aí sim nós temos o resultado aquele mitani calcular volume pirâmide nada mais é do que a função calcular volume pirâmide sendo chamada já com altura e afins E com isso nós temos um resultado em mãos Então veja presencialmente que na utilização do Cláudio primeiro temos o calcular volume área base novamente nós definimos primeiro a base e virou dentro da pirâmide na última linha nós aí se nós definimos essa altura que no caso seria 2 e no final a nós conseguimos ser realmente é o resultado dessa desse cálculo Além disso nós temos o de corretor de corretor ele é um tipo específico de Cláudio Então essas cores é como se diz de corretores eles tivesse um apelido né tem 1 arroba E aí tem uma definição essa palavra chave do decorador ela é utilizada para garantir que o nosso código aí pode ser machucado sem grandes alterações na estrutura quando fala alteração estrutural é realmente pegar aquele código que tem que ficar mudando muita coisa reestruturando ele ela tando ele então isso nos ajuda bastante como eu falei fazemos pequenas alterações ao longo do código sem ter que ficar testando muito acaba introduzindo m b então de corrida ele acaba sendo muito útil nisso veja que temos aqui dois exemplos né então primeiro nós definimos o de correr pelo sinal de Arroba e dois casos que já existiram principais primeiro é o estético message e o segundo é o clássico E se ele é o método que é estático uma das definições que existem dentro de programação orientada a objetos são os métodos que eles são estáticos Ou seja que acabam não tendo o estado é alterado para a assim que acaba afetando a todo o estado de um objeto específico então nós conseguimos também definir certas funções ou chamados e quais poderiam estar definidos como M estágio dessa forma veja lá no exemplo do bolo e também na vimos anteriormente Se eu quisesse criar um novo método chamada calcular porções por roubo até porque estamos falando de bolo aqui né a partir de um número de ovos eu quero calcular quantas porções tem aquele bolo pode vender isso aqui em específico não é que vai ser específico a um objeto tão calcular porções por novo Isso é se aplica a qualquer bolo né até poderia ser não pode dizer o que vai auxiliar a receita do bolo mas não será o específico do bolo então por isso que tá aqui como método estatístico é queremos calcular porções provo mas não que você vai modificar o peso veja que nenhum momento temos o selfie nesse último método nenhum momento nós estamos alterando o peso eu não acho que temos aqui algumas diferenças que são bens essenciais em relação ao atribuir peso por exemplo mais uma vez desde que eu te vi o peso começa com selfie e tem peso atribuir calcular proporções por outro não tem isso porque não precisamos do céu fica a gente não vai alterar o peso em um momento é o mestre estágio então também por isso que nós colocamos esse arroba né No começo para definir esse esse método como sendo de fato estático e é por isso que temos esse arroba Tech do DF então por isso que ele está dessa maneira aqui também importante eu saber que quando criamos os decoradores também pode Joel consigo customizar isso consegui anotar o número de caso de uso e também é possível de adaptarmos a este melhorarmos o nosso código aí frisando esses covers e depois tudo bem